some setup for tests

   >>> from zope import component
   >>> from sqlalchemy import create_engine
   >>> from ore.alchemist.interfaces import IDatabaseEngine
   >>> from ore.alchemist import Session
   >>> from bungeni import models as model
   >>> from bungeni.models import domain, schema
   >>> from bungeni.core.workflows import dbutils
   >>> import datetime
   >>> import bungeni.core.workflows.question as question_workflow
   >>> import bungeni.core.workflows.transitioncron as cron
   >>> import bungeni.core.workflows.question
   >>> import ore.workflow   
   
Setting up Database Connection and Utilities:

   >>> db = create_engine('postgres://localhost/bungeni-test', echo=False)
   >>> component.provideUtility( db, IDatabaseEngine, 'bungeni-db' )
   >>> model.metadata.bind = db   
   >>> model.metadata.create_all() 
   >>> session = Session()
   
set up utilities
---------------  
  
  >>> today = datetime.date.today()
  
  
  >>> component.provideAdapter(
  ...    bungeni.core.workflows.WorkflowState,
  ...    (bungeni.models.interfaces.IBungeniContent,))

  >>> component.provideAdapter(
  ...    bungeni.core.workflows.question.QuestionWorkflowAdapter,
  ...    (domain.Question,))

  >>> component.provideAdapter(
  ...    ore.workflow.workflow.WorkflowInfo,
  ...    (domain.Question,))

  >>> component.provideHandler(
  ...    bungeni.core.workflows.question.workflowTransitionEventDispatcher)


   
Questions

  >>> question = domain.Question()
  >>> question.approval_date = datetime.date.today() - datetime.timedelta(5)
  >>> question.status ="admissible Question"  #question_workflow.states.admissible  
  >>> session.save(question)
  >>> session.flush()
  
  >>> question.question_id
  1L
  
  >>> question2 = domain.Question()
  >>> question2.approval_date = datetime.date.today() - datetime.timedelta(1)
  >>> question2.status = "admissible Question" #question_workflow.states.admissible  
  >>> session.save(question2)
  >>> session.flush()
  
    
  >>> question3 = domain.Question()
  >>> question3.approval_date = datetime.date.today() - datetime.timedelta(1)
  >>> question3.status = "Question complete" #question_workflow.states.complete  
  >>> session.save(question3)
  >>> session.flush()
  
get the questions that are in the workflow state:
  
  >>> questions = cron._getQuestionsApprovedBefore(datetime.date.today(), "admissible Question")  
  >>> len(questions)
  2
  
  >>> questions = cron._getQuestionsApprovedBefore(datetime.date.today(), "Question complete")  
  >>> len(questions)  
  1  
    
defer admissible question older than today

  >>> cron._deferAdmissibleQuestionsBefore(datetime.date.today()) 
  >>> session.flush()     
 
  >>> questions = cron._getQuestionsApprovedBefore(datetime.date.today(), "admissible Question")  
  >>> len(questions)
  0
  
  >>> questions = cron._getQuestionsApprovedBefore(datetime.date.today(), "Question complete")  
  >>> len(questions)  
  1      

  >>> questions = cron._getQuestionsApprovedBefore(datetime.date.today(), "Question deferred")  
  >>> len(questions)  
  2        
  
cleanup
-------
  >>> session.flush()
  >>> session.commit()
  >>> session.close()
  
