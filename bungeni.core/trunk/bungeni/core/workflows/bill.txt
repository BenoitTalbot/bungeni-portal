Bill Workflow
=============

The default bill workflow models the Westminister Tradition.

Setup
-----

  >>> from bungeni.models.domain import Bill
  >>> from ore.workflow.interfaces import IWorkflowInfo
  >>> from ore.alchemist import Session  
  >>> import copy  
  

  
  >>> import bungeni.models as model
  >>> import datetime
  
  some setup for tests

   >>> from zope import component
   >>> from bungeni.models import domain, schema
  
   
Setting up Database Connection and Utilities:

   >>> import bungeni.core.testing as testing
   >>> testing.setup_db()  
   >>> session = Session()
   >>> i = 0  
  
  >>> import bungeni.core.workflows.testing
  >>> bungeni.core.workflows.testing.setup_adapters()
  >>> bungeni.core.workflows.testing.setup_security_adapters()


  >>> from zope.interface import classImplements
  >>> classImplements( bungeni.models.domain.Bill, bungeni.core.interfaces.IVersionable)


Transition events
-----------------

We set up event subscribers to make sure all registered transition
events are called.

  >>> from bungeni.core.workflows import testing
  >>> check_transition_events = testing.provide_transition_events_check(
  ...     bungeni.core.workflows.bill.wf)

  
  >>> from bungeni.core.workflows.testing import transitions, permission, schedule_item, create_sitting
    

Sitting to schedule the bill:
-----------------------------
 
  >>> sit1 = create_sitting()

  
Owner of the bill
-----------------
  >>> country = model.Country()
  >>> country.country_id = 'KE'
  >>> country.country_name = u"Kenya"
  >>> session.save(country)
  >>> session.flush()
 
  >>> mp_1 = model.ParliamentMember(u"mp_1", 
  ...        first_name=u"a", 
  ...        last_name=u'ab', 
  ...        birth_country="KE",
  ...        email=u"mp1@example.com", 
  ...        date_of_birth=datetime.datetime.now(),
  ...        gender='M') 
  
  >>> session.save(mp_1)
  >>> session.flush()

Bill Types
----------
  >>> bt = model.BillType()
  >>> bt.bill_type_name = u"Private Bill"
  >>> session.save(bt)
  >>> session.flush()


  >>> bill = Bill()
  >>> bill.bill_type_id = bt.bill_type_id
  >>> bill.owner_id = mp_1.user_id
  >>> bill.title = u"New Bill"
  >>> session.save(bill)
  >>> session.flush()



Drafting A Bill
---------------
  
  >>> transitions( bill )
  (u'create-bill',)
    
  >>> IWorkflowInfo(bill).fireTransition('create-bill')  

  >>> transitions( bill )
   (u'submit-bill',)
   
Publish Bill in gazette
-----------------------
  >>> IWorkflowInfo(bill).fireTransition('submit-bill')  
  >>> transitions( bill )
  (u'withdraw-submitted', u'schedule-first')
  
A Bill can be withdrawn at (almost) any stage:
----------------------------------------------
  >>> bill_withdraw = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_withdraw).fireTransition('withdraw-submitted')     
  >>> bill_withdraw.status  
  u'billstates.withdrawn'
  >>> transitions( bill_withdraw ) 
  ()
  
  
First Reading
-------------
First step for a bill is to be scheduled for a public reading, the user interface
presents a transition specific ui viewlet to be used for scheduling the reading.

  >>> schedule_item(bill, sit1)
  >>> IWorkflowInfo(bill).fireTransition('schedule-first')    
  >>> transitions( bill )
  (u'postpone-first', u'ma-schedule-second', u'withdraw-first-reading', u'select-first-committee')
  
The first reading can be postponed:

  >>> IWorkflowInfo(bill).fireTransition('postpone-first')    
  >>> transitions( bill )
  (u'reschedule-first',) 

and rescheduled:
  >>> IWorkflowInfo(bill).fireTransition('reschedule-first')    
  >>> transitions( bill )
  (u'postpone-first', u'ma-schedule-second', u'withdraw-first-reading', u'select-first-committee')


A Bill can be withdrawn at (almost) any stage:
----------------------------------------------
  >>> bill_withdraw = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_withdraw).fireTransition('withdraw-first-reading')     
  >>> bill_withdraw.status  
  u'billstates.withdrawn'
  >>> transitions( bill_withdraw ) 
  ()


Committees
----------

Next step, optionally is to send the bill to a committee. After a bill is 
sent to committee, it can be scheduled for a second reading
  
  >>> bill_1st_committee = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_1st_committee).fireTransition('select-first-committee')     
  >>> bill_1st_committee.status  
  u'billstates.first_committee'
  >>> transitions( bill_1st_committee ) 
  (u'withdraw-first-committee', u'schedule-second-from-first-committee')
  
A Bill can be withdrawn at (almost) any stage:
----------------------------------------------
  >>> bill_withdraw = copy.deepcopy(bill_1st_committee)     
  >>> result = IWorkflowInfo(bill_withdraw).fireTransition('withdraw-first-committee')     
  >>> bill_withdraw.status  
  u'billstates.withdrawn'
  >>> transitions( bill_withdraw ) 
  ()

or made avaliable for scheduling for the 2nd committee
------------------------------------------------------
  >>> result = IWorkflowInfo(bill_1st_committee).fireTransition('schedule-second-from-first-committee')     
  >>> bill_1st_committee.status  
  u'billstates.second_reading_pending'
  >>> transitions( bill_1st_committee ) 
  (u'schedule-second',)


Second Reading
--------------
We can then schedule a second reading, again in the ui, this presents a workflow
viewlet for scheduling the bill.
 
The Bill can be made available for scheduling from the 1st reading

  >>> IWorkflowInfo(bill).fireTransition('ma-schedule-second')    
  >>> transitions( bill ) 
  (u'schedule-second',) 

and finally scheduled for the second reading

  >>> IWorkflowInfo(bill).fireTransition('schedule-second')    
  >>> transitions( bill ) 
  (u'ma-schedule-whole-house', u'withdraw-second-reading', u'postpone-second')

A Bill can be withdrawn at (almost) any stage:
----------------------------------------------
  >>> bill_withdraw = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_withdraw).fireTransition('withdraw-second-reading')     
  >>> bill_withdraw.status  
  u'billstates.withdrawn'
  >>> transitions( bill_withdraw ) 
  ()

The second reading can be postponed:

  >>> IWorkflowInfo(bill).fireTransition('postpone-second')    
  >>> transitions( bill ) 
  (u'reschedule-second',)

and rescheduled:
  >>> IWorkflowInfo(bill).fireTransition('reschedule-second')    
  >>> transitions( bill ) 
  (u'ma-schedule-whole-house', u'withdraw-second-reading', u'postpone-second')


Committee of the Whole House
----------------------------
make the bill available for scheduling:
 
  >>> IWorkflowInfo(bill).fireTransition('ma-schedule-whole-house')    
  >>> transitions( bill ) 
  (u'schedule-whole-house',)

and schedule it:

  >>> IWorkflowInfo(bill).fireTransition('schedule-whole-house')    
  >>> transitions( bill ) 
   (u'select-second-committee', u'withdraw-whole-house', u'ma-schedule-third-reading', u'postpone-second-reading-and-whole-house', u'postpone-whole-house')

A Bill can be withdrawn at (almost) any stage:
----------------------------------------------
  >>> bill_withdraw = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_withdraw).fireTransition('withdraw-whole-house')     
  >>> bill_withdraw.status  
  u'billstates.withdrawn'
  >>> transitions( bill_withdraw ) 
  ()

postpone whole house

  >>> IWorkflowInfo(bill).fireTransition('postpone-whole-house')    
  >>> transitions( bill ) 
  (u'reschedule-whole-house',)

and reschedule whole house

  >>> IWorkflowInfo(bill).fireTransition('reschedule-whole-house')    
  >>> transitions( bill ) 
   (u'select-second-committee', u'withdraw-whole-house', u'ma-schedule-third-reading', u'postpone-second-reading-and-whole-house', u'postpone-whole-house')

if the second reading and the committee of the whole house did not take place
you can postpone both:

  >>> bill_whp2 = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_whp2).fireTransition('postpone-second-reading-and-whole-house')     
  >>> transitions(bill_whp2)
  (u'reschedule-second',)


Third Reading
-------------
from the second reading the third reading can be scheduled directly:

  >>> bill_tr = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_tr).fireTransition('ma-schedule-third-reading')     
  >>> transitions(bill_tr)
  (u'second-committee-schedule-third-reading',)

or it can be send to a second committee first.
Second Committee:
-----------------

  >>> IWorkflowInfo(bill).fireTransition('select-second-committee')    
  >>> transitions( bill ) 
  (u'withdraw-second-committee', u'ma-schedule-second-report-reading')

A Bill can be withdrawn at (almost) any stage:
----------------------------------------------
  >>> bill_withdraw = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_withdraw).fireTransition('withdraw-second-committee')     
  >>> bill_withdraw.status  
  u'billstates.withdrawn'
  >>> transitions( bill_withdraw ) 
  ()

The report of the 2nd committee is to be read:
---------------------------------------------
make available for scheduling 

  >>> IWorkflowInfo(bill).fireTransition('ma-schedule-second-report-reading')    
  >>> transitions( bill ) 
  (u'schedule-second-report-reading',)
  
and schedule:

  >>> IWorkflowInfo(bill).fireTransition('schedule-second-report-reading')    
  >>> transitions( bill ) 
  (u'ma-second-committee-schedule-third-reading', u'postpone-second-report-reading', u'recommit-second-committee', u'withdraw-report-reading')

A Bill can be withdrawn at (almost) any stage:
----------------------------------------------
  >>> bill_withdraw = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_withdraw).fireTransition('withdraw-report-reading')     
  >>> bill_withdraw.status  
  u'billstates.withdrawn'
  >>> transitions( bill_withdraw ) 
  ()

The report reading can be postponed:

  >>> IWorkflowInfo(bill).fireTransition('postpone-second-report-reading')    
  >>> transitions( bill ) 
  (u'reschedule-second-report-reading',)
  
and rescheduled:

  >>> IWorkflowInfo(bill).fireTransition('reschedule-second-report-reading')    
  >>> transitions( bill ) 
  (u'ma-second-committee-schedule-third-reading', u'postpone-second-report-reading', u'recommit-second-committee', u'withdraw-report-reading')
  

After the reading the bill can be send back to the committee:

  >>> bill_2ndc = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_2ndc).fireTransition('recommit-second-committee') 
  >>> transitions( bill_2ndc )   
  (u'withdraw-second-committee', u'ma-schedule-second-report-reading')
  
or made available for the 3rd reading:  
  >>> IWorkflowInfo(bill).fireTransition(u'ma-second-committee-schedule-third-reading')    
  >>> transitions( bill )   
  (u'second-committee-schedule-third-reading',)
  
Third Reading:
--------------
schedule it for the third reading:

  >>> IWorkflowInfo(bill).fireTransition('second-committee-schedule-third-reading')    
  >>> transitions( bill )   
  (u'withdraw-third-reading', u'reject', u'approve', u'postpone-third-reading')

A Bill can be withdrawn at (almost) any stage:
----------------------------------------------
  >>> bill_withdraw = copy.deepcopy(bill)     
  >>> result = IWorkflowInfo(bill_withdraw).fireTransition('withdraw-third-reading')     
  >>> bill_withdraw.status  
  u'billstates.withdrawn'
  >>> transitions( bill_withdraw ) 
  ()

the third reading can be postponed:

  >>> IWorkflowInfo(bill).fireTransition('postpone-third-reading')    
  >>> transitions( bill )   
  (u'reschedule-third-reading',)

and rescheduled:
  >>> IWorkflowInfo(bill).fireTransition('reschedule-third-reading')    
  >>> transitions( bill )   
  (u'withdraw-third-reading', u'reject', u'approve', u'postpone-third-reading')

  
Vote - Approved/Rejected
------------------------
either the bill gets approved:
  >>> bill_approve = copy.deepcopy(bill) 
  >>> IWorkflowInfo(bill_approve).fireTransition('approve') 
  >>> transitions( bill_approve ) 
  ()
    
or rejected:
  >>> IWorkflowInfo(bill).fireTransition('reject')    
  >>> transitions( bill ) 
  ()
  
  
cleanup
-------
  >>> session.flush()
  >>> session.commit()
  >>> session.close()
  
