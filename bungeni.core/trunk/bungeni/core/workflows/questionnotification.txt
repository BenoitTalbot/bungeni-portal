Notifications
=============

  >>> from bungeni.core.workflows import questionnotification as notification
  >>> from zope.component.interfaces import ObjectEvent

Setup mock delivery component.

  >>> import zope.sendmail.interfaces
  
  >>> class MockMailDelivery(object):
  ...     interface.implements(zope.sendmail.interfaces.IMailDelivery)
  ...
  ...     def send(self, *args):
  ...         print "From: %s\nTo: %s\n\n%s" % args

  >>> component.provideUtility(MockMailDelivery())

Set up a user.

  >>> from bungeni import core as model
  >>> from datetime import datetime

  >>> from bungeni.core.domain import User
  >>> user = User()
  >>> user.first_name = u'John'
  >>> user.last_name = u'Doe'
  >>> user.email = 'john.doe@localhost'

  
  >>> from ore.alchemist import Session
  >>> session = Session()
  >>> session.save(user)
  >>> session.flush()

we need a parliament, government ministry and ministers 
to send the question notification to.

  >>> from bungeni import core as model
  >>> parliament = model.Parliament( short_name=u"p_1", start_date=datetime.now(), election_date=datetime.now())
  >>> session.save(parliament)
  >>> session.flush()
  
  >>> gov = model.Government(short_name=u"gov_1", start_date=datetime.now())
  >>> gov.parliament_id = parliament.parliament_id
  >>> session.save(gov)
  >>> session.flush()  
  
  >>> country = model.Country()
  >>> country.country_id = 'KE'
  >>> country.country_name = u"Kenya"
  >>> session.save(country)
  >>> ministry = model.Ministry(short_name=u"A ministry", start_date=datetime.now())
  >>> ministry.government_id = gov.government_id
  >>> session.save(ministry)
  >>> session.flush()


  >>> mp_1 = model.ParliamentMember(u"minister 1", 
  ...        first_name=u"a", 
  ...        last_name=u'ab', 
  ...        birth_country="KE",
  ...        email=u"mp1@example.com", 
  ...        date_of_birth=datetime.now(),
  ...        gender='M')
  >>> mp_2 = model.ParliamentMember(u"minister 2", 
  ...        first_name=u"b", 
  ...        last_name=u"bc", 
  ...        birth_country="KE",  
  ...        date_of_birth=datetime.now(),
  ...        email=u"mp2@example.com",
  ...        gender='M')
  >>> mp_3 = model.ParliamentMember(u"No minister",
  ...        first_name=u"c", 
  ...        birth_country="KE",  
  ...        last_name=u"cd",
  ...        date_of_birth=datetime.now(),
  ...        email=u"mp3@example.com", 
  ...        gender='F')      

  >>> session.save( mp_1 )
  >>> session.save( mp_2 )
  >>> session.save( mp_3 )      
  >>> session.flush()

  >>> minister = model.Minister()
  >>> minister.group_id = ministry.group_id
  >>> minister.user_id = mp_1.user_id
  >>> session.save(minister)
  >>> session.flush()
  
  
  >>> minister2 = model.Minister()
  >>> minister2.group_id = ministry.group_id
  >>> minister2.user_id = mp_2.user_id
  >>> session.save(minister2)
  >>> session.flush()  
  
Questions
---------

  >>> from bungeni.core.domain import Question
  >>> question = Question()
  >>> question.subject = u"My subject"
  >>> question.owner_id = user.user_id
  >>> question.receive_notification = False
  
Question received.
  
  >>> notification.sendNotificationToMemberUponReceipt(ObjectEvent(question))

Let's change our setting for receive notification so an email message
is dispatched.

  >>> question.receive_notification = True
  >>> notification.sendNotificationToMemberUponReceipt(ObjectEvent(question))
  From: clerks.office@parliament.go.tld
  To: "John Doe" <john.doe@localhost>...
  Subject: Question received: My subject...
  
Send notification to Clerk's office upon submit.
#XXX
Note that the notification setting for the clerks office are
HARDCODED in the preferences so we cannot test this yet!

    >>> notification.sendNotificationToClerkUponSubmit(ObjectEvent(question))
    From: "John Doe" <john.doe@localhost>
    To: clerks.office@parliament.go.tld ...
    Subject: Question submitted: My subject ...

the question is marked as “complete” and is made available / forwarded to the Speaker's Office 
for reviewing and to make it “admissible”. 
   

   >>> notification.sendNotificationsUponComplete(ObjectEvent(question))
    From: clerks.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost>...
    Question completed for review at the speakers office.

At the same time the question is also forwarded to the ministry.

   >>> question.ministry_id = ministry.group_id
   >>> notification.sendNotificationsUponComplete(ObjectEvent(question))  
    From: clerks.office@parliament.go.tld
    To: "a ab" <mp1@example.com> ,"b bc" <mp2@example.com> ...
    Question assigned to ministry
    From: clerks.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost> ...
    Question completed for review at the speakers office.
   
  
A question was rejected by the speakers office.
    >>> notification.sendNotificationToMemberUponReject(ObjectEvent(question))
    From: speakers.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost> ...
    Subject: Question rejected: My subject ...
  

A question needs clarification by the MP
    >>> notification.sendNotificationToMemberUponNeedsClarification(ObjectEvent(question))
    From: clerks.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost> ...
    Subject: Question needs clarification: My subject ...


A question was deferred by Clerk's office.
    >>> notification.sendNotificationToMemberUponDeferred(ObjectEvent(question))
    From: speakers.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost> ...
    Subject: Question deferred: My subject ...

A question was scheduled by Speakers office.
    >>> notification.sendNotificationToMemberUponSchedule(ObjectEvent(question))
    From: clerks.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost> ...
    Subject: Question scheduled: My subject ...

A question was postponed by the speakers office.
    >>> notification.sendNotificationToMemberUponPostponed(ObjectEvent(question))  
    From: clerks.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost> ...
    Subject: Question postponed: My subject ...
  

A question was sent to a ministry for written response.
    >>> notification.sendNotificationToMemberUponSentToMinistry(ObjectEvent(question))
    From: clerks.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost> ...
    Subject: Question sent to ministry: My subject ...
  

A questions answer was reviewed by Clerk's office.
    >>> notification.sendNotificationToMemberUponAnswer(ObjectEvent(question))  
    From: clerks.office@parliament.go.tld
    To: "John Doe" <john.doe@localhost> ...
    Subject: Question answered: My subject ...
  
cleanup
-------
  >>> session.flush()
  >>> session.commit()
  >>> session.close()  
  
