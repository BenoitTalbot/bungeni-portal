Response workflow
=================
Note that the response workflow triggers question workflow actions.
If the question workflow does not pass the tests there is no use testing
the response workflow.


  >>> from bungeni.models.domain import Response

Setup
-----

  >>> import ore.workflow
  >>> import copy
  >>> from ore.alchemist import Session  
  
Setting up Database Connection and Utilities:

   >>> import bungeni.core.testing as testing
   >>> engine = testing.setup_db()  
   >>> session = Session()   
  
  
   >>> import bungeni.core.workflows.testing
   >>> bungeni.core.workflows.testing.setup_adapters()
  

  
Security Adapters

  >>> bungeni.core.workflows.testing.setup_security_adapters() 



  
some setup for tests


   >>> from ore.alchemist import Session
   >>> from bungeni import models as model
   >>> from bungeni.models import domain, schema
   >>> from bungeni.core.workflows import dbutils

   
   

     
Transition events
-----------------

We set up event subscribers to make sure all registered transition
events are called.

  >>> from bungeni.core.workflows import testing
  >>> check_transition_events = testing.provide_transition_events_check(
  ...     bungeni.core.workflows.response.wf)
  
Workflow
--------

  >>> from ore.workflow.interfaces import IWorkflow , IWorkflowInfo
  >>> from bungeni.core.workflows.testing import transitions, permission




Questions
we need to have a question in this state (pending response) so that the actions that
gets fired by the response transitions succeed.

  >>> question = domain.Question()
  >>> question.short_name = u" A Question"
  >>> question.status = u"questionstates.response_pending"
  >>> session.add(question)
  >>> session.flush()
  
  >>> question.question_id
  1L
  
Responses

  >>> response = domain.Response()
  >>> response.response_id = question.question_id
  >>> response.language = "en"
  >>> session.add(response)
  >>> session.flush()
 
  >>> question.question_id
  1L
  
  >>> response.response_id
  1L
  


First we initialize the workflow.
  
  >>> transitions(response)
  (u'create',)

  >>> permission(response)
  (Global(CheckerPublic,zope.security.checker),)

  >>> IWorkflowInfo(response).fireTransition(u'create')

  >>> session.flush()

The response is now in a draft state.


  >>> transitions(response)
   (u'submit',)
    
submit the response to the clerks office:
    
  >>> permission(response)
  (u'bungeni.response.Submit',)

  >>> session.flush()

  
The ministry sends the answer to the clerks office

  >>> IWorkflowInfo(response).fireTransition(u'submit')
  
  >>> transitions(response)
  (u're-draft', u'complete')

  >>> session.flush()

submitting the response triggers a workflow transition of the question

  >>> transitions(question)
  (u'answer',)

the response may be sent back to the ministry:

  >>> IWorkflowInfo(response).fireTransition(u're-draft')
  
  >>> transitions(response)
  (u'submit',)

and then be resubmitted:
  >>> IWorkflowInfo(response).fireTransition(u'submit')
  
  >>> transitions(response)
  (u're-draft', u'complete')

The response is reviewed by the clerk and published

  >>> IWorkflowInfo(response).fireTransition(u'complete')
  
  >>> transitions(response)
  ()

reviewing the response triggers a workflow transition of the question

  >>> transitions(question)
  ()

Transition events check
-----------------------

  >>> print check_transition_events
    {(u'responsestates.draft', u'responsestates.submitted'): True,
     (u'responsestates.submitted', u'responsestates.complete'): True,
     (u'questionstates.responded', u'questionstates.answered'): True}

cleanup
-------
  >>> session.flush()
  >>> session.commit()
  >>> session.close()
