Files
=====

We store files in a subversion repository. A ``IVersionedFileUtility``
allows fetching files for a given object.

Setup
-----

  >>> from datetime import datetime, date
  >>> today = date.today()

Imports.

  >>> from bungeni.models import domain
  >>> import bungeni.models.interfaces as model_interfaces
  >>> from bungeni.core import interfaces
  >>> from zope.component import getMultiAdapter
  >>> from ore.alchemist import Session
  >>> from cStringIO import StringIO 
  >>> import transaction

Content creation
----------------
  
First we'll create some groups and a content object to which we'll
attach files.

  >>> parliament = domain.Parliament(
  ...    short_name=u"p_1",
  ...    start_date=datetime.now(),
  ...    election_date=datetime.now())
  
  >>> session = Session()
  >>> session.add( parliament )
  
  >>> country = domain.Country()
  >>> country.country_id = 'KE'
  >>> country.country_name = u"Kenya"
  >>> session.add(country)
  
  >>> session.flush()
  
  >>> mp_1 = domain.User(
  ...        u"mp_1",
  ...        first_name=u"a",
  ...        last_name=u'ab', 
  ...        birth_country="KE",
  ...        email=u"mp1@example.com",
  ...        date_of_birth=datetime.now(),
  ...        gender='M')
  >>> session.add(mp_1)
  
  >>> billtype = domain.BillType()
  >>> billtype.bill_type_id = 1 
  >>> billtype.bill_type_name="private"
  >>> session.add(billtype)
  
  >>> session.flush()
  
  >>> bill = domain.Bill()
  >>> bill.short_name = u"terra"
  >>> bill.bill_type_id = 1
  >>> bill.owner_id = mp_1.user_id
  >>> bill.language = "en"
  >>> bill2 = domain.Bill()
  >>> bill2.short_name = u"firma"
  >>> bill2.bill_type_id = 1  
  >>> bill2.owner_id = mp_1.user_id
  >>> bill2.language = "en"
  
  >>> committee = domain.Committee(
  ...     short_name=u"Committee", start_date=datetime.now())
  >>> committee.parliament_id = parliament.parliament_id
  >>> committee2 = domain.Committee(
  ...      short_name=u"Committee 2", start_date=datetime.now())
  >>> committee2.parliament_id = parliament.parliament_id

Commit transaction to persist objects.
  
  >>> stored = map(Session().add, (bill, bill2, committee, committee2))
  >>> transaction.commit()

Demonstration
-------------
  
Now we can store attachements on some content

  >>> files = model_interfaces.IDirectoryLocation( bill ).directory
  >>> files
  <bungeni.core.files.ContainedDirectory object at ...>
  
For testing purposes, we'll commit the changes to the repository now, so we can 
demonstrate the transaction integration next.

  >>> transaction.commit()
  
Let's add a simple attachment file.

  >>> file = files.makeFile('rabbit.txt')
  >>> stream = StringIO("Hello World")
  >>> file.writeStream( stream )

Verify that the file path is composed of the date and the object id.
  
  >>> file.svn_path == "/bill/%s-%s/%s/%s/rabbit.txt" % (
  ...    today.year, today.month, today.day, bill.bill_id)
  True

  >>> files.keys()
  ['rabbit.txt', 'branches', 'trunk'] 
  
All changes are integrated with the zope transaction system, if we
abort the transaction, our modifications are aborted.

  >>> transaction.abort()
  >>> files.keys()
   ['branches', 'trunk']

Let's retry adding the file; this time we'll commit the transaction.
  
  >>> file = files.makeFile('rabbit.txt')
  >>> stream = StringIO("Hello World")
  >>> file.writeStream(stream)
  >>> file.svn_path == "/bill/%s-%s/%s/%s/rabbit.txt" % (
  ...    today.year, today.month, today.day, bill.bill_id)
  True
  
  >>> files.keys()
  ['rabbit.txt', 'branches', 'trunk']  
  
  >>> transaction.commit()
  >>> files.keys()
  ['rabbit.txt', 'branches', 'trunk']   
  

  >>> trunk = files['trunk']
  >>> billfile = trunk.makeFile('bill.txt')
  >>> stream = StringIO("Hello World\n This is a bill")
  >>> billfile.writeStream(stream)
  >>> transaction.commit()  
  
  >>> branches = files['branches']
  >>> b1 = branches.makeDirectory('1234')
  >>> for node in trunk.keys():
  ...   b1.copy(node, trunk[node])
  <ore.svn.file.SubversionFile object at ...>
  
  >>> b1.keys()
  ['bill.txt']

Location
--------

  >>> from bungeni.core.files import ContainedDirectory
  >>> branches = ContainedDirectory.fromDirectory(bill, branches)
  >>> from zope.location.interfaces import ILocation
  >>> ILocation.providedBy(branches)
  True

  >>> directory = branches['1234']
  >>> ILocation.providedBy(directory)
  True
  
Notes
-----

The API (readme.txt) for ``ore.svn`` is recommended reading on working
with versioned files/directories.
