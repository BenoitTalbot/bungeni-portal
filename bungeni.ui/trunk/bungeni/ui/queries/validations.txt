Setup
-----
Setting up Database Connection and Utilities:

   >>> from ore.alchemist import Session
   >>> from bungeni.models import domain
   >>> import datetime
   >>> import bungeni.models.testing
   >>> db = bungeni.models.testing.setup_db()
   >>> from ore.alchemist import Session   
   >>> session = Session()
   >>> from bungeni.models.testing import today, yesterday, tomorrow, dayat   
   >>> from bungeni.ui.queries import utils
   >>> class MockContainer(object):
   ...  __parent__ = None
   >>> from bungeni.ui.forms import validations
   
   
Note that we only test the overlap of 'peers' here.
refer to test_dates.py to test  that contained objects are inside
their parents dates   
   
Parliaments
-----------   
low level validations:
   
   >>> parliament = domain.Parliament( short_name=u"p_1", start_date=today, election_date=yesterday, end_date=tomorrow)  
   >>> session.add( parliament)
   >>> session.flush()
   >>> list(utils.validate_date_in_interval( None, domain.Parliament, yesterday))
   []
   >>> list(utils.validate_date_in_interval( None, domain.Parliament, today))
   [<bungeni.models.domain.Parliament object at ...>]

   >>> list(utils.validate_date_in_interval( None, domain.Parliament, tomorrow))
   [<bungeni.models.domain.Parliament object at ...>]

   >>> list(utils.validate_date_in_interval( parliament, domain.Parliament, today))
   []
   >>> list(utils.validate_date_in_interval( parliament,domain.Parliament, tomorrow))
   []
   >>> list(utils.validate_date_in_interval( None, domain.Parliament, dayat))   
   []
   
Before you can add a new parliament all others must be closed
   
   >>> list(utils.validate_open_interval( None, domain.Parliament))      
   []
   
        
Add a new (open ended) parliament
   >>> parliament2 = domain.Parliament( short_name=u"p_2", start_date=tomorrow, election_date=today, end_date=None)  
   >>> session.add( parliament2)
   >>> session.flush()   
   
   >>> list(utils.validate_open_interval( None, domain.Parliament))
   [<bungeni.models.domain.Parliament object at ...>]
 
give the 2nd parliament an end date and save   
   >>> parliament2.end_date = dayat   
   >>> session.flush() 
   
No open parliaments  anymore 
   >>> list(utils.validate_open_interval( None, domain.Parliament))
   []
      
Now check for overlapping dates but not for the current (edited) parliament   
   
   >>> list(utils.validate_date_in_interval( parliament2, domain.Parliament, today))   
   [<bungeni.models.domain.Parliament object at ...>]
   
   >>> list(utils.validate_date_in_interval( parliament2 , domain.Parliament, dayat))  
   []
   >>> list(utils.validate_date_in_interval(parliament, domain.Parliament, dayat))   
   [<bungeni.models.domain.Parliament object at ...>]
   
   >>> list(utils.validate_date_in_interval( parliament, domain.Parliament, yesterday)) 
   []
   >>> list(utils.validate_date_in_interval( parliament, domain.Parliament, today))    
   []
   
give the 2nd parliament an end date and save   
   >>> parliament2.end_date = dayat   
   >>> session.flush() 
   
No open parliaments  anymore 
   >>> list(utils.validate_open_interval( None, domain.Parliament)) 
   []

High level validations:   

   >>> parliament_container = MockContainer()
   >>> form_data= {'start_date': today, 'end_date': tomorrow, 'election_date': yesterday}
   >>> validations.validate_parliament_dates(action=None, data=form_data, 
   ...  context=parliament, container=parliament_container)
   []
   
   >>> validations.validate_parliament_dates(action=None, data=form_data, 
   ...  context=parliament2, container=parliament_container)
   [Invalid(u'The start date overlaps with (p_1)', 'start_date'), 
   Invalid(u'The end date overlaps with (p_1)', 'end_date')]
   
   >>> parliament.end_date = None
   >>> session.flush() 
   >>> validations.validate_parliament_dates(action=None, data=form_data, 
   ...  context=parliament2, container=parliament_container)
   [Invalid(u'Another parliament is not yet dissolved (p_1)', 'election_date')]

Government:
------------

  >>> government = domain.Government()
  >>> government.start_date = today
  >>> government_container = MockContainer()
  >>> government_container.__parent__ = parliament
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government, container=government_container)
  []
  
  >>> government.parliament_id = parliament.parliament_id
  >>> government.short_name = u"gov1"
  >>> session.add(government)  
  >>> session.flush()
  >>> government.end_date
  
  >>> government_container.__parent__ = parliament2  
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government, container=government_container)
  [Invalid(u'Start date must start after the swearing in of the parliament (...)', 'start_date')]
  
  >>> government2 = domain.Government()
  >>> list(utils.validate_open_interval(government2, domain.Government))
  [<bungeni.models.domain.Government object at ...>]
  
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government2, container=government_container)
  [Invalid(u'Start date must start after the swearing in of the parliament (...)', 'start_date'), 
  Invalid(u'Another Government is not yet dissolved (gov1)', 'start_date')]
  
  >>> government_container.__parent__ = parliament  
  >>> parliament.end_date = tomorrow
  >>> session.flush()
  >>> form_data['start_date'] = dayat
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government, container=government_container)
   [Invalid(u'Start date cannot be after the parliaments dissolution (...)', 'start_date')]
  
  >>> government.end_date = tomorrow
  >>> session.flush()
  >>> form_data['start_date'] = today  
  >>> validations.validate_government_dates(action=None, data=form_data,
  ...   context=government2, container=government_container)
  [Invalid(u'The start date overlaps with (gov1)', 'start_date'), 
  Invalid(u'The end date overlaps with (gov1)', 'end_date')]
  
User group memberships:
----------------------
  >>> country = domain.Country()
  >>> country.country_id = 'KE'
  >>> country.country_name = u"Kenya"
  >>> session.add(country)
  >>> session.flush()
  >>> mp_1 = domain.ParliamentMember(u"mp_1", 
  ...        first_name=u"a", 
  ...        last_name=u'ab', 
  ...        birth_country="KE",
  ...        email=u"mp1@example.com", 
  ...        date_of_birth=datetime.datetime.now(),
  ...        gender='M')
  >>> mp_2 = domain.ParliamentMember(u"mp_2", 
  ...        first_name=u"b", 
  ...        last_name=u"bc", 
  ...        birth_country="KE",  
  ...        date_of_birth=datetime.datetime.now(),
  ...        email=u"mp2@example.com",
  ...        gender='M')
  >>> mp_3 = domain.ParliamentMember(u"mp_3",
  ...        first_name=u"c", 
  ...        birth_country="KE",  
  ...        last_name=u"cd",
  ...        date_of_birth=datetime.datetime.now(),
  ...        email=u"mp3@example.com", 
  ...        gender='F')  
  >>> for mp in [ mp_1, mp_2, mp_3 ]:
  ...       session.add(mp)
  ...       session.flush()
  ...       membership = domain.GroupMembership()
  ...       membership.user = mp
  ...       membership.group = parliament
  ...       session.add( membership )
  ...       session.flush()
  >>> group_container = MockContainer()
  >>> group_container.__parent__ = parliament
  >>> memberships = session.query(domain.GroupMembership).all()
  >>> list(memberships)
  [<bungeni.models.domain.GroupMembership object at ...>, 
  <bungeni.models.domain.GroupMembership object at ...>, 
  <bungeni.models.domain.GroupMembership object at ...>]
  

  >>> form_data = {"start_date": today,
  ...   "end_date": None,
  ...   "user_id": mp_1.user_id}
  
  >>> validations.validate_group_membership_dates(None, form_data, memberships[0], group_container)
  []
  >>> validations.validate_group_membership_dates(None, form_data, None, group_container)
  [Invalid(u'The person is a member in (p_1) at that date', 'end_date')]
  
  >>> form_data = {"start_date": yesterday,
  ...   "end_date": today,
  ...   "user_id": mp_1.user_id} 

  >>> validations.validate_group_membership_dates(None, form_data, memberships[0], group_container)
  []
  >>> validations.validate_group_membership_dates(None, form_data, None, group_container)
  [Invalid(u'The person is a member in (p_1) at that date', 'end_date')]
 
  >>> memberships[0].end_date = tomorrow
  >>> session.flush()
 
  >>> form_data = {"start_date": yesterday,
  ...   "end_date": yesterday,
  ...   "user_id": mp_1.user_id} 
  >>> validations.validate_group_membership_dates(None, form_data, None, group_container)
  []

  >>> form_data = {"start_date": yesterday,
  ...   "end_date": tomorrow,
  ...   "user_id": mp_1.user_id} 
  >>> validations.validate_group_membership_dates(None, form_data, None, group_container)
  [Invalid(u'The person is a member in (p_1) at that date', 'end_date')]
    
  >>> form_data = {"start_date": tomorrow,
  ...   "end_date": tomorrow,
  ...   "user_id": mp_1.user_id} 
  >>> validations.validate_group_membership_dates(None, form_data, None, group_container)     
  [Invalid(u'The person is a member in (p_1) at that date', 'start_date'), 
  Invalid(u'The person is a member in (p_1) at that date', 'end_date')]
     
   
