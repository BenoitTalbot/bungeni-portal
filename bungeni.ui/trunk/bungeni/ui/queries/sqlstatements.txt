  some setup for tests

   >>> from zope import component
   >>> from sqlalchemy import create_engine
   >>> from ore.alchemist.interfaces import IDatabaseEngine
   >>> from ore.alchemist import Session     
   >>> from bungeni.models import domain, schema
   >>> import bungeni.models as model
   >>> import bungeni.ui.queries.statements as s   
   >>> import bungeni.ui.queries.sqlvalidation as sv      
   >>> import datetime
   >>> import bungeni.ui.queries.utils as utils
   
Setting up Database Connection and Utilities:

   >>> db = create_engine('postgres://localhost/bungeni-test', echo=False)
   >>> component.provideUtility( db, IDatabaseEngine, 'bungeni-db' )
   >>> model.metadata.bind = db   
   >>> model.metadata.create_all()
   >>> from alchemist.security.schema import metadata  
   >>> metadata.bind = db
   >>> metadata.create_all()  
   >>> session = Session()

   >>> connection = db.connect()
   >>> today = datetime.date.today()
   
   
call all the sql statments to make sure that the syntax is correct:

   >>> utils.execute_sql( s.sql_addMinister , primary_key = 1)
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_addExtensionMember ,**{'primary_key' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_AddCommitteeMember ,**{'primary_key' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_AddCommitteeStaff ,**{'primary_key' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_AddMemberOfParliament ,**{'primary_key' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_add_members ,**{'primary_key' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_addMemberTitle ,**{'primary_key' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_select_question_ministry_add  ,**{'parliament_id' : 1})
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_edit_members ,**{'member_id' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_editSubstitution ,**{'group_id' : 1 , 'user_id' : 1})
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_EditMemberTitle ,**{'primary_key' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_select_question_ministry_edit ,**{'parliament_id' : 1})
   <sqlalchemy.engine.base.ResultProxy object at ...>
   >>> utils.execute_sql(s.sql_bill_timeline , **{ 'item_id' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...>
   
the sql statements used in the validations:   
   >>> utils.execute_sql(sv.checkSessionInterval ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkSittingSessionInterval  ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkSittingGroupInterval  ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkGovernmentInterval ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...>         
   >>> utils.execute_sql(sv.checkParliamentInterval ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkForOpenParliamentInterval)
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkForOpenSessionInterval ,**{'parliament_id' : 1})
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkForOpenPartymembership ,**{'user_id' : 1})
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkPartymembershipInterval  ,**{'user_id' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMemberTitleDuplicates ,** { 'membership_id' : 1, 'title_name_id' :1,  'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMemberTitleUnique , **{ 'title_name_id' : 1, 'group_id' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMySittingSessionInterval  ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMySittingGroupInterval  ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMySessionInterval  ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMyGovernmentInterval ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMyParliamentInterval ,**{'parent_key' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkForMyOpenParliamentInterval  ,**{'parent_key' : 1})
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkForMyOpenPartymembership  ,**{'parent_key' : 1, 'user_id' : 1 })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMyPartymembershipInterval  ,**{'parent_key' : 1, 'user_id' : 1 , 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMyMemberTitleDuplicates  ,**{'title_name_id' : 1, 'membership_id' : 1 , 'role_title_id' : 1, 'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 
   >>> utils.execute_sql(sv.checkMyMemberTitleUnique ,**{'title_name_id' : 1, 'group_id' : 1 , 'role_title_id' : 1,  'date': today })
   <sqlalchemy.engine.base.ResultProxy object at ...> 


cleanup
-------
   >>> connection.close()
   >>> session.flush()
   >>> session.commit()
   >>> session.close()
  
     
   
   

