Setup
-----

  >>> import bungeni.models.domain
  >>> from bungeni.core.workflows.bill import states
  >>> import bungeni.core.interfaces
  >>> from ore.workflow.interfaces import IWorkflow, IWorkflowInfo
  >>> import ore.workflow
  >>> from ore.alchemist import Session  
  >>> import copy  
  

  
  >>> import bungeni.models as model
  >>> import datetime
  
  some setup for tests

   >>> from zope import component
   >>> from sqlalchemy import create_engine
   >>> from ore.alchemist.interfaces import IDatabaseEngine
   >>> from bungeni.models import domain, schema
   >>> import sqlalchemy as rdb
  
   
Setting up Database Connection and Utilities:

   >>> db = create_engine('postgres://localhost/bungeni-test', echo=False)
   >>> component.provideUtility( db, IDatabaseEngine, 'bungeni-db' )
   >>> model.metadata.bind = db   
   >>> model.metadata.create_all()
   >>> from alchemist.security.schema import metadata  
   >>> metadata.bind = db
   >>> metadata.create_all()  
   >>> session = Session()
   >>> from bungeni.ui.viewlets.schedule import scheduled_items, ScheduledItems, getScheduledItem

Sitting to schedule the bill:
-----------------------------
  >>> st = model.SittingType()
  >>> st.sitting_type = u"morning"
  >>> st.start_time = datetime.time(8,30)
  >>> st.end_time = datetime.time(12,30)  
  >>> session.save(st)
  >>> session.flush()

  >>> st.sitting_type_id
  1L
 
  >>> sit1 = model.GroupSitting()
  >>> sit1.start_date = datetime.datetime.now()
  >>> sit1.end_date = datetime.datetime.now()
  >>> sit1.sitting_type = st.sitting_type_id
  >>> session.save(sit1)
  >>> session.flush() 
  
 >>> sit2 = model.GroupSitting()
 >>> sit2.start_date = datetime.datetime.now()
 >>> sit2.end_date = datetime.datetime.now()
 >>> sit2.sitting_type = st.sitting_type_id
 >>> session.save(sit2)
 >>> session.flush()     
  
  
Owner of the bill
-----------------
  >>> country = model.Country()
  >>> country.country_id = 'KE'
  >>> country.country_name = u"Kenya"
  >>> session.save(country)
  >>> session.flush()
 
  >>> mp_1 = model.ParliamentMember(u"mp_1", 
  ...        first_name=u"a", 
  ...        last_name=u'ab', 
  ...        birth_country="KE",
  ...        email=u"mp1@example.com", 
  ...        date_of_birth=datetime.datetime.now(),
  ...        gender='M') 
  
  >>> session.save(mp_1)
  >>> session.flush()

Bill Types
----------
  >>> bt = model.BillType()
  >>> bt.bill_type_name = u"Private Bill"
  >>> session.save(bt)
  >>> session.flush()  

Setup Items to be scheduled:
-----------------------------

  >>> bill = model.Bill()
  >>> bill.bill_type_id = bt.bill_type_id
  >>> bill.owner_id = mp_1.user_id
  >>> bill.title = u"New Bill"
  >>> session.save(bill)
  >>> session.flush()
  >>> bill.bill_id
  
  >>> motion = model.Motion()
  >>> session.save(motion)
  >>> session.flush()
  >>> motion.motion_id
  
  >>> question = model.Question()
  >>> question.subject = u"subject of the question"
  >>> question.question_text = u"The question"
  >>> session.save(question)
  >>> session.flush()    
  >>> question.question_id
  
Schedule an item
-------------------
  >>> def schedule_item(item_id, sitting_id):
  ...   item_schedule = domain.ItemSchedule()
  ...   item_schedule.sitting_id = sitting_id
  ...   item_schedule.item_id = item_id
  ...   session.save(item_schedule)
  ...   session.flush()   
  
Schedule Items for sitting
--------------------------

  >>> items = session.query(scheduled_items)
  >>> Items = session.query(ScheduledItems)
  >>> items.all()
  []

  
  
  >>> schedule_item(question.question_id, sit1.sitting_id)
  >>> schedule_item(bill.bill_id, sit1.sitting_id)
  >>> schedule_item(motion.motion_id, sit1.sitting_id)
  >>> len(items.all())  
  3  
  
  >>> getScheduledItem(1)
  
  >>> getScheduledItem(3)
  
    
  >>> items.filter(schema.items_schedule.c.active == False).all()
  []
      
  >>> len(items.filter(schema.items_schedule.c.active == True).all())
  3

  >>> len(items.filter(schema.items_schedule.c.sitting_id == sit1.sitting_id).all())  
  3      

  >>> len (items.filter( rdb.and_(schema.items_schedule.c.sitting_id == sit1.sitting_id, schema.items_schedule.c.active == True) ).order_by(schema.items_schedule.c.order).all())
  3

  >>> len (Items.filter( rdb.and_(schema.items_schedule.c.sitting_id == sit1.sitting_id, schema.items_schedule.c.active == True) ).order_by(schema.items_schedule.c.order).all())
  3




  >>> len(items.filter(schema.items_schedule.c.sitting_id == sit2.sitting_id).all())  
  0          
      
  >>> schedule_item(question.question_id, sit2.sitting_id)
  >>> schedule_item(bill.bill_id, sit2.sitting_id)
  >>> schedule_item(motion.motion_id, sit2.sitting_id)
  >>> len(items.all())
  6
  
  >>> len(items.filter(schema.items_schedule.c.sitting_id == sit2.sitting_id).all())  
  3    
  
  
cleanup
-------
  >>> session.flush()
  >>> session.commit()
  >>> session.close()
  
  
  
    
  
