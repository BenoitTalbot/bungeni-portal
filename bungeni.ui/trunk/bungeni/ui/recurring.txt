Test for recurring events:
  >>> import datetime
  >>> from bungeni.ui import recurring
  
Some dates to exclude from scheduling:
  >>> exclude_dates = []
  >>> for i in range(1,31):
  ...   exclude_dates.append(datetime.date( 2009, 5, i))
  
Weekly schedule all mondays in Jan and Feb

  >>> recurring.getWeeklyScheduleDates(datetime.date(2009,1,1), 0, datetime.date(2009,2,28))
  {'valid': [datetime.date(2009, 1, 5), 
  datetime.date(2009, 1, 12), 
  datetime.date(2009, 1, 19), 
  datetime.date(2009, 1, 26), 
  datetime.date(2009, 2, 2), 
  datetime.date(2009, 2, 9), 
  datetime.date(2009, 2, 16), 
  datetime.date(2009, 2, 23)], 
  'invalid': []}
   
  >>> recurring.getWeeklyScheduleDates(datetime.date(2009,1,1), 0, datetime.date(2009,2,28), edates=exclude_dates)
  {'valid': [datetime.date(2009, 1, 5), 
  datetime.date(2009, 1, 12), 
  datetime.date(2009, 1, 19), 
  datetime.date(2009, 1, 26), 
  datetime.date(2009, 2, 2), 
  datetime.date(2009, 2, 9), 
  datetime.date(2009, 2, 16), 
  datetime.date(2009, 2, 23)], 
  'invalid': []}


All tuesdays in april to june with exclusions

  >>> recurring.getWeeklyScheduleDates(datetime.date(2009,4,1), [1,] , datetime.date(2009,6,30), edates=exclude_dates)
  {'valid': [datetime.date(2009, 4, 7), 
  datetime.date(2009, 4, 14), 
  datetime.date(2009, 4, 21), 
  datetime.date(2009, 4, 28), 
  datetime.date(2009, 6, 2), 
  datetime.date(2009, 6, 9), 
  datetime.date(2009, 6, 16), 
  datetime.date(2009, 6, 23), 
  datetime.date(2009, 6, 30)], 
  'invalid': [datetime.date(2009, 5, 5), 
  datetime.date(2009, 5, 12), 
  datetime.date(2009, 5, 19), 
  datetime.date(2009, 5, 26)]}
  
All tuesdays and wednesdays for 10 times

  >>> recurring.getWeeklyScheduleDates(datetime.date(2009,4,10), [1,2] , times=10, edates=exclude_dates)
  {'valid': [datetime.date(2009, 4, 14), 
  datetime.date(2009, 4, 15), 
  datetime.date(2009, 4, 21), 
  datetime.date(2009, 4, 22), 
  datetime.date(2009, 4, 28), 
  datetime.date(2009, 4, 29)], 
  'invalid': [datetime.date(2009, 5, 5), 
  datetime.date(2009, 5, 6), 
  datetime.date(2009, 5, 12), 
  datetime.date(2009, 5, 13)]}
  
monthly every 15th from april to june

  >>> recurring.getMonthlyScheduleDates(datetime.date(2009,4,10), monthday=15, end=datetime.date(2009,6,30), edates=exclude_dates)
  {'valid': [datetime.date(2009, 4, 15), 
  datetime.date(2009, 6, 15)], 
  'invalid': [datetime.date(2009, 5, 15)]}

first mondays april to june  

  >>> recurring.getMonthlyScheduleDates(datetime.date(2009,4,1), nth=1, weekday=0, end=datetime.date(2009,6,30), edates=exclude_dates)
  {'valid': [datetime.date(2009, 4, 6), 
  datetime.date(2009, 6, 1)], 
  'invalid': [datetime.date(2009, 5, 4)]}
  
last fridays  

    >>> recurring.getMonthlyScheduleDates(datetime.date(2009,4,1), nth=-1, weekday=4, end=datetime.date(2009,6,30), edates=exclude_dates)
    {'valid': [datetime.date(2009, 4, 24), 
    datetime.date(2009, 6, 26)], 
    'invalid': [datetime.date(2009, 5, 29)]}
    
    
get nth weekday:

    >>> recurring.nth_weekday_in_month(datetime.date(2009,4,7))
    [{'daynum': 1, 'name': u'1st'}]
    
    >>> recurring.nth_weekday_in_month(datetime.date(2009,4,8))
    [{'daynum': 2, 'name': u'2nd'}]
    
    >>> recurring.nth_weekday_in_month(datetime.date(2009,4,30))
     [{'daynum': 5, 'name': u'5th'}, {'daynum': -1, 'name': u'last'}]

    >>> recurring.nth_weekday_in_month(datetime.date(2009,4,24))
    [{'daynum': 4, 'name': u'4th'}, {'daynum': -1, 'name': u'last'}]

    >>> recurring.nth_weekday_in_month(datetime.date(2009,4,23))
    [{'daynum': 4, 'name': u'4th'}]  
    
