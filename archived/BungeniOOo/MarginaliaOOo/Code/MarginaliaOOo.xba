<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="MarginaliaOOo" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit

Sub Main
	Dim theParagraph 
	Dim theNthWord as String
	
	theParagraph = getNthHeading(&quot;h2&quot;, 1)
	if (Not isnull(theParagraph) ) then
		Msgbox theParagraph.getString()
	end if
End Sub

REM test function
Sub Main2
	
	Dim theParagraph 
	Dim theNthWord as String
	
	theParagraph = getNthParagraph(3)
	if (Not isnull(theParagraph) ) then
		Msgbox theParagraph.getString()
		Dim paraBegin
	    Dim paraCursor, wordCursor 
	    paraCursor =  theParagraph.getText().createTextCursorByRange(theParagraph.getStart())
		wordCursor = getNthWord(theParagraph, 4)	    
		Msgbox wordCursor.getString()
		Dim charCursor, charCursorEnd
		charCursor = getNthCharacter(wordCursor, 0)
		charCursorEnd = getNthCharacter(wordCursor, 3)
		charCursor.gotoRange(charCursorEnd, true)
		charCursor.CharBackColor = RGB(200, 0 , 0)
		Msgbox charCursor.getString()
	end if

	Dim wordRange 
	Dim libs 
	libs = BasicLibraries
	libs.LoadLibrary(&quot;Marginalia&quot;)
	wordRange = &quot;p[2]/word(2);p[2]/word(5)&quot;
	Dim test as Variant
	
	test = getMarginaliaRangeMeasure(wordRange)

	if (IsArray(test.MFrom)) then
	Msgbox &quot;test successful for From range&quot;
	end if
	if (IsArray(test.MTo)) then
	Msgbox &quot;test successful for to range&quot;
	end if
	
	
End Sub

REM returns the nth paragraph
REM returns a paragraph object
Function getNthParagraph (nthPara as integer)
	Dim paraEnumerator, theParagraph
	Dim i as integer &apos;counter for paragraphs
	i = 0 
	paraEnumerator = thisComponent.getText().createEnumeration()
  	Do while paraEnumerator.hasMoreElements()
  		theParagraph = paraEnumerator.nextElement
  		Rem check if it is a pargraph
  		if (theParagraph.supportsService(&quot;com.sun.star.text.Paragraph&quot;) ) then
  			if (theParagraph.ParaChapterNumberingLevel = -1 ) then
  				i = i + 1
  				if ( i = nthPara) then 
  					&apos;this is the para we need
  					getNthParagraph = theParagraph
  					Exit function
  				end if	
  			end if
  		end if	
  	Loop
  	getNthParagraph = null
End Function

REM function to get the nth word
REM returns a word cursor
Function getNthWord (theParagraph  as variant, nthWord as integer)
	
	Dim paraLeftCursor , paraRightCursor
	Dim paraText 
	
	paraText = theParagraph.getText()
	
	paraLeftCursor = theParagraph.getText().createTextCursorByRange(theParagraph.getStart())
	paraRightCursor =  theParagraph.getText().createTextCursorByRange(theParagraph.getStart())
	paraRightCursor.gotoEndOfParagraph(True)

	Dim wordCounter as Integer
	wordCounter = 0
	
	paraLeftCursor.goRight(0, False)
	
	
	Do while paraText.compareRegionEnds(paraLeftCursor, paraRightCursor) &gt;= 0 
		Dim bNextWord as boolean
		bNextWord = paraLeftCursor.gotoNextWord(true)	
		if (bNextWord = False) then 
			exit do
		End if
		wordCounter = wordCounter + 1
		Dim msg as String
		msg=&quot;&quot;
		if (wordCounter = nthWord) then 
			getNthWord = paraLeftCursor
			Exit Function
		end if
	
		paraLeftCursor.goRight(0, False)	
		
	Loop 
	

End Function

rem for characters the index is 0 based 
rem 0 = start of 1st character
rem returns a character level cursor
Function getNthCharacter (theWord as Variant, nthBeginCharacter as integer)
	Dim wordLeftCursor , wordRightCursor
	Dim wordText 
	wordText = theWord.getText()
	wordLeftCursor = theWord.getText().createTextCursorByRange(theWord.getStart())
	wordLeftCursor.goRight(nthBeginCharacter, false)
	getNthCharacter = wordLeftCursor
End Function


Function getNthHeading (headingName as string, nthHeading as integer)
rem heading types are h1, h2, h3, h4...etc....
Dim headingType as string
rem heading levels are 0 based indexes
Dim headingLevel as integer

headingType = left(headingName, 1)
rem subtract 1 because heading levels are 0 based...
headingLevel = CInt(Mid (headingName, 2, len(headingName))) - 1

if (headingType = &quot;h&quot; ) then 
	Dim paraEnumerator, theHeading
	Dim i as integer &apos;counter for paragraphs
	i = 0 
	paraEnumerator = thisComponent.getText().createEnumeration()
  	Do while paraEnumerator.hasMoreElements()
  		theHeading = paraEnumerator.nextElement
  		Rem check if it is a pargraph
  		if (theHeading.supportsService(&quot;com.sun.star.text.Paragraph&quot;) ) then
  			if (theHeading.ParaChapterNumberingLevel =  headingLevel ) then
  				i = i + 1
  				if ( i = nthHeading) then 
  					&apos;this is the para we need
  					getNthHeading = theHeading
  					Exit function
  				end if	
  			end if
  		end if	
  	Loop
 else
 	getNthHeading = Nothing
end if
getNthHeading
End function


</script:module>