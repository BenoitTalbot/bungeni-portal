package org.bungeni.testsuite;

import com.sun.star.accessibility.AccessibleEventObject;
import com.sun.star.accessibility.XAccessibleEventListener;
import com.sun.star.beans.Property;
import com.sun.star.beans.PropertyVetoException;
import com.sun.star.beans.UnknownPropertyException;
import com.sun.star.beans.XPropertySet;
import com.sun.star.beans.XPropertySetInfo;
import com.sun.star.container.NoSuchElementException;
import com.sun.star.container.XEnumeration;
import com.sun.star.container.XEnumerationAccess;
import com.sun.star.container.XIndexAccess;
import com.sun.star.container.XNamed;
import com.sun.star.document.XDocumentInfo;
import com.sun.star.document.XDocumentInfoSupplier;
import com.sun.star.document.XEventListener;
import com.sun.star.frame.XController;
import com.sun.star.frame.XFrame;
import com.sun.star.frame.XModel;
import com.sun.star.lang.EventObject;
import com.sun.star.lang.WrappedTargetException;
import com.sun.star.lang.XComponent;
import com.sun.star.lang.XServiceInfo;
import com.sun.star.text.XText;
import com.sun.star.text.XTextCursor;
import com.sun.star.text.XTextDocument;
import com.sun.star.text.XTextRange;
import com.sun.star.text.XTextSection;
import com.sun.star.text.XTextViewCursor;
import com.sun.star.uno.Any;
import com.sun.star.uno.UnoRuntime;
import com.sun.star.uno.XComponentContext;
import com.sun.star.view.XSelectionChangeListener;
import com.sun.star.view.XSelectionSupplier;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import javax.swing.tree.DefaultMutableTreeNode;
import org.bungeni.ooo.BungenioOoHelper;
import org.bungeni.ooo.OOComponentHelper;
import org.bungeni.ooo.ooQueryInterface;

/*
 * testBungeniLibs.java
 *
 * Created on September 1, 2007, 9:44 PM
 */

/**
 *
 * @author  Administrator
 */
public class testBungeniLibs extends javax.swing.JPanel implements com.sun.star.lang.XEventListener {
    
    private XComponentContext theComponentContext;
    private XComponent  theComponent = null;
    private OOComponentHelper ooDocument;
    private BungenioOoHelper openofficeObject;
    private String templatePath;
    SelectionChangeListener selList;
    /** Creates new form testBungeniLibs */
    
    
    public testBungeniLibs() {
        initComponents();
        
       
    }
    
    public testBungeniLibs(XComponentContext context) {
        initComponents();
        theComponentContext  = context;
        selList = new SelectionChangeListener(); 
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnLaunch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        btnClear = new javax.swing.JButton();
        txtTemplatePath = new java.awt.TextField();
        jLabel1 = new javax.swing.JLabel();
        btnSelectiListener = new javax.swing.JButton();
        btnRemoveSelListener = new javax.swing.JButton();
        execBasicMacro = new javax.swing.JButton();
        btnMacroReturnValue = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        cboOpenDocuments = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        btnLaunch.setText("Launch OO and Connect");
        btnLaunch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaunchActionPerformed(evt);
            }
        });

        txtMessage.setColumns(20);
        txtMessage.setLineWrap(true);
        txtMessage.setRows(5);
        jScrollPane1.setViewportView(txtMessage);

        btnClear.setText("Clear");

        jLabel1.setText("Enter PATH to template or leave blank to launch a blank doc.");

        btnSelectiListener.setText("Attach Selection Listener....");
        btnSelectiListener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectiListenerActionPerformed(evt);
            }
        });

        btnRemoveSelListener.setText("Detach Selection list...");
        btnRemoveSelListener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveSelListenerActionPerformed(evt);
            }
        });

        execBasicMacro.setText("Exec. Search Replace Macro");
        execBasicMacro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execBasicMacroActionPerformed(evt);
            }
        });

        btnMacroReturnValue.setText("Get Macro Return value");
        btnMacroReturnValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMacroReturnValueActionPerformed(evt);
            }
        });

        jButton1.setText("import doc above+replace text+apply attributes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jButton2.setText("Attach Doc. Modified Listener");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Display Section Hierarchy");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        cboOpenDocuments.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton4.setText("Get Currently Open Documents....");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Display Section Hierarchy Enum");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Close");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Get image properties");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(btnLaunch, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(txtTemplatePath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, execBasicMacro, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, btnSelectiListener, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 148, Short.MAX_VALUE))
                        .add(16, 16, 16)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(btnMacroReturnValue, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .add(btnRemoveSelListener, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 167, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(jButton1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .add(66, 66, 66)
                        .add(btnClear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jButton6))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(29, 29, 29)
                                .add(jButton7))
                            .add(cboOpenDocuments, 0, 400, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(txtTemplatePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnLaunch)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSelectiListener)
                    .add(btnRemoveSelListener))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(execBasicMacro)
                    .add(btnMacroReturnValue))
                .add(12, 12, 12)
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton2)
                    .add(jButton5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cboOpenDocuments, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton4)
                    .add(jButton7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(9, 9, 9)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnClear)
                    .add(jButton6)))
        );
    }// </editor-fold>//GEN-END:initComponents

    public int changeSelectedTextImageName(String newName) {
    int nReturn = -1;
    try {
    XTextViewCursor viewCursor = ooDocument.getViewCursor();
    Object selection = ooDocument.getCurrentSelection();
    XServiceInfo xSelInfo = ooQueryInterface.XServiceInfo(selection); 
    if (xSelInfo.supportsService("com.sun.star.text.TextGraphicObject")) {
            XNamed xNamedSel = ooQueryInterface.XNamed(selection);
             xNamedSel.setName("tiger");
            nReturn = 0;
          }
     }  catch (Exception ex) {
            ex.printStackTrace();
      } finally {
          return nReturn;
      }
}
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
// TODO add your handling code here:
       if( ooDocument.isTextGraphicObjectSelected() ) {
           this.txtMessage.append("yes image was selected\n");
           this.txtMessage.append("changing image name to tiger\n");
           changeSelectedTextImageName("tiger");
       } else
           this.txtMessage.append("no image was selected\n");
       
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton6ActionPerformed


    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:
    BungeniBTree treeRoot = new BungeniBTree();
        try {
            Object root = ooDocument.getTextSections().getByName("root");
            treeRoot.addRootNode(new String("root"));
            int currentIndex = 0;
            String parentObject = "root";
            XTextSection theSection = ooQueryInterface.XTextSection(root);
             XTextRange range = theSection.getAnchor();
             XText xText = range.getText();
             XEnumerationAccess enumAccess = (XEnumerationAccess) UnoRuntime.queryInterface(XEnumerationAccess.class, xText);
             XEnumeration enumeration = enumAccess.createEnumeration();
             while (enumeration.hasMoreElements()) {
                 Object elem = enumeration.nextElement();
                 XPropertySet objProps = ooQueryInterface.XPropertySet(elem);
                 XPropertySetInfo objPropsInfo = objProps.getPropertySetInfo();
                 if (objPropsInfo.hasPropertyByName("TextSection")) {
                     XTextSection xConSection = (XTextSection) ((Any)objProps.getPropertyValue("TextSection")).getObject();
                     if (xConSection != null ) {
                         XNamed objSectProps = ooQueryInterface.XNamed(xConSection);
                         String sectionName = objSectProps.getName();
                          if (!sectionName.equals("root")) {
                             System.out.println("if Section name is not root = " + sectionName); 
                             BungeniBNode theNode = treeRoot.getNodeByName(sectionName);
                                //theNode will never be null for the root section
                                 if (theNode == null) { 
                                      System.out.println("theNode was null for "+ sectionName);
                                     //if the node doesnt exist, we need to add it
                                     //get the parent section name
                                     //iterate parent sections
                                      XTextSection sectionParent=xConSection.getParentSection();
                                      XNamed parentProps = ooQueryInterface.XNamed(sectionParent);
                                      String parentSectionname = parentProps.getName();
                                      String currentSectionname = sectionName;
 
                                      ArrayList<String> nodeHierarchy = new ArrayList<String>();
                                      //array list goes from child(0) to ancestors (n)
                                      nodeHierarchy.add(currentSectionname);
                                      System.out.println("before commencing parent loop iteration, starting parent = " +  parentSectionname);
                                      while (1==1) {
                                          //go up the hierarchy until you reach root.
                                          //break upon reaching the parent
                                          if (parentSectionname.equals("root")) {
                                              nodeHierarchy.add(parentSectionname);
                                              break;
                                          }
                                         nodeHierarchy.add(parentSectionname);
                                         currentSectionname = parentSectionname;
                                         sectionParent = sectionParent.getParentSection();
                                         parentProps = ooQueryInterface.XNamed(sectionParent);
                                         parentSectionname = parentProps.getName();
                                         System.out.println("new parentSectionName = " + parentSectionname);
                                      } //end while (1== 1)
                                      //now iterate through the array list backwards adding grand parent the children
                                      int nLastIndex = nodeHierarchy.size() - 1 ;
                                      BungeniBNode currentNode = null, previousNode = null;
                                      for (int n=nLastIndex ; n >= 0 ; n--) {
                                          String matchingNode = nodeHierarchy.get(n);
                                          //if it is root, it will always exist...
                                          currentNode = treeRoot.getNodeByName(matchingNode);
                                          if (currentNode == null ) { //node does not exist
                                              //we need to create the current node and add it to the previous node
                                               if (previousNode != null) //the starting point is always the root node
                                                  treeRoot.addNodeToNamedNode(previousNode.getName(), matchingNode);
                                                  previousNode = treeRoot.getNodeByName(matchingNode);
                                              } else { //current node exists... 
                                                  previousNode = currentNode;
                                              }
                                       } //end - for ()
                         }   // end if (theNode==null)
                       } // end if (section name != root)
                     } //end if (conSection !=null)   
                 } //end if (hasPropertyName textsection)
             }   
         txtMessage.append(treeRoot.toString());
        } catch (Exception e) {
            
            System.out.println(" Exception was raised ");
            System.out.println(" message = " + e.getMessage());
            e.printStackTrace();
        }
        
        
    }//GEN-LAST:event_jButton5ActionPerformed

    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:
        try {
        System.out.println("getting components");
        XEnumerationAccess enumComponentsAccess = openofficeObject.getDesktop().getComponents();
        XEnumeration enumComponents = enumComponentsAccess.createEnumeration();
        System.out.println("enumerating components");
        int i=0;
           this.cboOpenDocuments.removeAllItems();
         
        
        while (enumComponents.hasMoreElements()) {
            Object nextElem = enumComponents.nextElement();
            System.out.println("getting model interface");
            XModel docModel = ooQueryInterface.XModel(nextElem);
            
            if (docModel != null ) { //supports XModel interface 
                System.out.println("docModel != null");
                XServiceInfo serviceInfo = ooQueryInterface.XServiceInfo(nextElem);
                if (serviceInfo.supportsService("com.sun.star.text.TextDocument")) {
                    System.out.println("supports TextDocument "+ (++i));
                    XTextDocument xDoc = (XTextDocument) UnoRuntime.queryInterface(XTextDocument.class, nextElem);
                    XFrame xframe = xDoc.getCurrentController().getFrame();
                    String strTitle = (String) ooQueryInterface.XPropertySet(xframe).getPropertyValue("Title");
                    this.cboOpenDocuments.addItem(i+ " - " + strTitle);
                }
            }
        }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
    try {
       XTextSection theSection  = (XTextSection) UnoRuntime.queryInterface(XTextSection.class, ooDocument.getTextSections().getByName("Section1"));  
       XTextSection[] sections = theSection.getChildSections();
       for (int i=0; i < sections.length; i++) {
           XPropertySet set = ooQueryInterface.XPropertySet(sections[i]);
            String sectionName;
      
                sectionName = (String) set.getPropertyValue("LinkDisplayName");
            
                 txtMessage.append(sectionName + "\n");
         
       }
            } catch (WrappedTargetException ex) {
                ex.printStackTrace();
            } catch (UnknownPropertyException ex) {
                ex.printStackTrace();
            } catch (NoSuchElementException ex) {
                ex.printStackTrace();
            }       
            
    }//GEN-LAST:event_jButton3ActionPerformed

    class accessibleEventListener implements XAccessibleEventListener {
        public void notifyEvent(AccessibleEventObject accessibleEventObject) {
        }

        public void disposing(EventObject eventObject) {
        }
        
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
    ooDocument.getComponent().addEventListener(this);
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
            Object[] params = new Object[2];
            params[0] = new String("Section1")   ;
            params[1] =  jTextField1.getText();
            txtMessage.append("running macro : InsertDocIntoSection");
            ooDocument.executeMacro("InsertDocIntoSection", params);
            params[0] = new String("[[QUESTION_TITLE]]");
            params[1] = new String("new string title");
            ooDocument.executeMacro("SearchAndReplace" , params);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnMacroReturnValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMacroReturnValueActionPerformed
// TODO add your handling code here:
        Object[] params = {};
        Object value = ooDocument.executeMacro("CursorInSection", params);
        txtMessage.append("Output values from macro was: " + (String)value);
        
    }//GEN-LAST:event_btnMacroReturnValueActionPerformed




    private void execBasicMacroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execBasicMacroActionPerformed
// TODO add your handling code here:
        Object[] params = new Object[2];
        params[0] = new String("Search for this");
        params[1] = new String("Replace with that");
        ooDocument.executeMacro("SearchAndReplace", params);
    }//GEN-LAST:event_execBasicMacroActionPerformed

    private void btnRemoveSelListenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveSelListenerActionPerformed
// TODO add your handling code here:
        ooQueryInterface.XSelectionSupplier(ooDocument.getDocumentModel().getCurrentController()).removeSelectionChangeListener(selList);
    }//GEN-LAST:event_btnRemoveSelListenerActionPerformed

    public String getSectionName()
{
    XTextSection loXTextSection;
    XTextViewCursor loXTextCursor;
    XPropertySet loXPropertySet;

    String lstrSectionName = "";

    try
    {
        loXTextCursor = ooDocument.getViewCursor();
        
        
        loXPropertySet = (XPropertySet)UnoRuntime.queryInterface(XPropertySet.class, loXTextCursor);

        loXTextSection = (XTextSection)((Any)loXPropertySet.getPropertyValue("TextSection")).getObject();

        if (loXTextSection != null)
        {
            loXPropertySet = (XPropertySet)UnoRuntime.queryInterface(XPropertySet.class, loXTextSection);

            lstrSectionName = (String)loXPropertySet.getPropertyValue("LinkDisplayName");
        }
    }
    catch (java.lang.Exception poException)
    {
        poException.printStackTrace();
    }

    return lstrSectionName;
} 
    class SelectionChangeListener implements XSelectionChangeListener {
        public SelectionChangeListener() {
            
        }

        public void selectionChanged(EventObject eventObject)  {
            XSelectionSupplier sel = ooQueryInterface.XSelectionSupplier(eventObject.Source);
            Object selection = null;
            if (sel == null ) {
                txtMessage.append("\n NULL SUPPLIER");
                return;
            } else {
                selection = sel.getSelection();
                if (selection == null ) 
                 txtMessage.append("\n NULL SELECTION");
                else {
                       XServiceInfo xSelInfo = ooQueryInterface.XServiceInfo(selection);
                           String strSelection = getSectionName();
                           txtMessage.append("Current Selectio = " + strSelection);
                        if ( xSelInfo.supportsService("com.sun.star.text.TextRanges") ){
                              XIndexAccess xIndexAccess = ooQueryInterface.XIndexAccess(selection);
                              if (xIndexAccess == null ) 
                                  txtMessage.append("\n NULL INDEX ");
                              else {
                            Object singleSel = null;
                            try {
                                singleSel = xIndexAccess.getByIndex(0);
                            } catch (WrappedTargetException ex) {
                                ex.printStackTrace();
                            } catch (com.sun.star.lang.IndexOutOfBoundsException ex) {
                                ex.printStackTrace();
                            }
                                    XTextRange xRange = ooQueryInterface.XTextRange(singleSel);
                                     //get the cursor for the selected range
                                     XTextCursor xRangeCursor = xRange.getText().createTextCursorByRange(xRange);
                                     if (xRangeCursor.isCollapsed())
                                     {
                                         txtMessage.append("\n ZERO LENGTH SELECTION!!!");
                                     } else {
                                         txtMessage.append("\n VALID SELECTION!!!!! ");
                                     }
                              }
                                 
                        } else {
                            txtMessage.append("\n NULL SELECTION");
                        }
         
                }
            }
            
            return;
        }

        public void disposing(EventObject eventObject) {
             System.out.println( "disposing called.  detaching as listener" );

        // stop listening for selection changes
            XSelectionSupplier aCtrl = ooQueryInterface.XSelectionSupplier( eventObject );
             if( aCtrl != null )
                aCtrl.removeSelectionChangeListener( selList );

            // remove as dispose listener
            theComponent.removeEventListener( this );


            return;
        }
    }
    private void btnSelectiListenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectiListenerActionPerformed
// TODO add your handling code here:
       XController xDocController = ooDocument.getDocumentModel().getCurrentController();
       XSelectionSupplier aSelSupp = (XSelectionSupplier) UnoRuntime.queryInterface(XSelectionSupplier.class,xDocController);
       if (aSelSupp != null  ) {
        aSelSupp.addSelectionChangeListener(selList);
        txtMessage.append("\nSuccessfully add text selection listener ");
       } else {
           txtMessage.append("\nFailed adding text selecton listener");
       }
     
       
    }//GEN-LAST:event_btnSelectiListenerActionPerformed

    private void btnLaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaunchActionPerformed
// TODO add your handling code here:
        templatePath = txtTemplatePath.getText().trim();
        if (theComponent != null  ) {
            txtMessage.setText("There is already a window Open!!!");
            return;
        }
       openofficeObject = new org.bungeni.ooo.BungenioOoHelper(theComponentContext);
       openofficeObject.initoOo();
       String templateURL = "";
        if (templatePath.length() != 0 )    
         templateURL = openofficeObject.convertPathToURL(templatePath);
        theComponent = openofficeObject.newDocument(templateURL);
        theComponent.addEventListener(this);
        ooDocument = new OOComponentHelper(theComponent, theComponentContext);
    
    }//GEN-LAST:event_btnLaunchActionPerformed

    public void disposing(EventObject eventObject) {
        XSelectionSupplier sel = ooQueryInterface.XSelectionSupplier(ooDocument.getDocumentModel().getCurrentController());
        if (sel != null ) {
            sel.removeSelectionChangeListener(selList);
            
        }
        theComponent.removeEventListener(this);
        
    }

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnLaunch;
    private javax.swing.JButton btnMacroReturnValue;
    private javax.swing.JButton btnRemoveSelListener;
    private javax.swing.JButton btnSelectiListener;
    private javax.swing.JComboBox cboOpenDocuments;
    private javax.swing.JButton execBasicMacro;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea txtMessage;
    private java.awt.TextField txtTemplatePath;
    // End of variables declaration//GEN-END:variables
    
}
