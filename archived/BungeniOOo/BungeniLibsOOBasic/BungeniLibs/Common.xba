<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Common" script:language="StarBasic">REM  *****  BASIC  *****
Option Explicit 

      

Function CursorInSection (docComponent) as String
	Dim oVCurs
	CursorInSection = &quot;&quot;
  	oVCurs = docComponent.getCurrentController().getViewCursor()

  	If IsEmpty(oVCurs.TextSection) Then
   		&apos;cursor not in a section...
   		CursorInSection = &quot;&quot;
  	Else
  		Dim secObj 
  		secObj = oVCurs.TextSection
  		CursorInSection = secObj.Name
  End If	
  
End Function

Sub ReplaceTextWithField (docComponent, HintName as String, PlaceHolderHintValue as String)
	Dim viewCursor, hintField, oText, tCursor
	
	hintField = thisComponent.createinstance(&quot;com.sun.star.text.TextField.JumpEdit&quot;)
	hintField.Hint = HintName
	hintField.PlaceHolder = PlaceHolderHintValue
	
	viewCursor = docComponent.CurrentController.GetViewCursor()
	oText = viewCursor.getText()
	oText.insertTextContent(viewCursor, hintField, true)
	
End Sub

Sub AddTextToSection (sectionName as String, strText as String, strStyle as String)
 Dim oSect
  Dim sName$
  Dim oVC
  Dim oText
  Dim oCols
  Dim s$
  sName = sectionName
  If ThisComponent.getTextSections().hasByName(sName) Then
  	  oSect = ThisComponent.getTextSections().getByName(sName)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        if (strText = &quot;&lt;parabreak&gt;&quot; ) then
 	       InsertParaBreak(endCursor)
        else
 	     	InsertString(endCursor, strText, strStyle)
      	end if
    	REM Insert a new paragraph and select it
    	rem sectionText.insertControlCharacter(sectionCurs, _
    	rem com.sun.star.text.ControlCharacter.LINE_BREAK, False)
    	rem   sectionText.insertString(sectionCurs, &quot;one more hello world&quot;, false)
      	rem sectionCurs.ParaStyleName = &quot;Heading 2&quot;
  End If
    
End Sub



Sub AddTextToSectionWithCharStyle (sectionName as String,  strText as String,  strStyle as String, charWeight as Single )
 Dim oSect
  Dim sName$
  Dim oVC
  Dim oText
  Dim oCols
  Dim s$
  sName = sectionName
  If ThisComponent.getTextSections().hasByName(sName) Then
  	  oSect = ThisComponent.getTextSections().getByName(sName)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
  	    InsertWeightedString(endCursor, strText, strStyle, charWeight)
  	 	REM Insert a new paragraph and select it
    	rem sectionText.insertControlCharacter(sectionCurs, _
    	rem com.sun.star.text.ControlCharacter.LINE_BREAK, False)
    	rem   sectionText.insertString(sectionCurs, &quot;one more hello world&quot;, false)
      	rem sectionCurs.ParaStyleName = &quot;Heading 2&quot;
  End If
    
End Sub

Sub AddSectionInsideSectionWithAttributes ( innerSection as String, newSection as String, AttNames() as String, AttValues() as com.sun.star.xml.AttributeData)
 Dim oSect
  If ThisComponent.getTextSections().hasByName(innerSection) Then
  	  oSect = ThisComponent.getTextSections().getByName(innerSection)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = ThisComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        Dim newSect, oCols
        newSect = ThisComponent.createInstance(&quot;com.sun.star.text.TextSection&quot;)
   		newSect.setName(newSection)
   		REM Now, create the columns...
     	oCols = ThisComponent.createInstance(&quot;com.sun.star.text.TextColumns&quot;)
    	oCols.setColumnCount(1)
    	newSect.TextColumns = oCols
    	newSect.UserDefinedAttributes = AddAttributesToContainer (newSect.UserDefinedAttributes, AttNames(), AttValues() )
        endCursor.getText().insertTextContent( endCursor, newSect, false)
        
        Dim oPar
        oPar = ThisComponent.createInstance(&quot;com.sun.star.text.Paragraph&quot;) 
        
        endCursor.getText().insertTextContentAfter (oPar, newSect)
  End If


End Sub

Sub AddSectionInsideSection (docComponent, innerSection as String,  newSection as String )
  Dim oSect
  If docComponent.getTextSections().hasByName(innerSection) Then
  	  oSect = docComponent.getTextSections().getByName(innerSection)
       rem XRay oSect
  	    Dim sectionText , sectionCurs, sectionRange
    	sectionCurs = docComponent.getText().createTextCursor()
    	sectionRange = oSect.getAnchor()
    	Dim bTableAtBegin as Boolean
    	Dim bTableAtEnd as Boolean
    	
    	bTableAtBegin = false
    	bTableAtEnd = false
    	
    	if (Not IsEmpty(sectionRange.TextTable)) then 
    		bTableAtBegin = true
    	end if
        if (Not IsEmpty(sectionRange.getEnd().TextTable) ) then 
        	bTableAtEnd = true
        End if 
        rem the following line temporarily
        
        Dim endRange, endCursor, compareSectionRegions
	   	Dim endTable, endPara
        if (bTableAtBegin) then
        	rem check if the endrange is also a table....
        	if (bTableAtEnd) then 
        		
        		rem add a line break after the table at the end
        		endTable = sectionRange.getEnd().TextTable
        		endTablePara = docComponent.createInstance(&quot;com.sun.star.text.Paragraph&quot;)
        		docComponent.getText().insertTextContentAfter(endTablePara, endTable)
        		REM we have to use a fresh section Anchor here to get the new range since sectRange still refers
        		REM to the older section boundary wihtout the line break at the end
        		endCursor = docComponent.getText().createTextCursorByRange(oSect.getAnchor().getEnd())
        			
        	Else
        		
        		endCursor = docComponent.getText().createTextCursorByRange(sectionRange.getEnd())
        		InsertParaBreak(endCursor)
        	
        	End If
        	rem endCursor.goLeft(1, false)	
        ElseIf (bTableAtEnd) then 
        	    
        		endTable = sectionRange.getEnd().TextTable
        		endTablePara = docComponent.createInstance(&quot;com.sun.star.text.Paragraph&quot;)
        		docComponent.getText().insertTextContentAfter(endTablePara, endTable)
        		endCursor = docComponent.getText().createTextCursorByRange(oSect.getAnchor().getEnd())
      	
        Else 
	        endRange = sectionRange.getEnd()
	        rem XRay endRange
	        REM if compareSectionRegions = 0 the section has no text and is empty
	        REM if compareSectionRegions = 1 the section has text and is not empty
	        compareSectionRegions = sectionRange.getText().compareRegionStarts(sectionRange.getStart(), sectionRange.getEnd())
	      	REM if 0 then we append a blank paragraph to the section.
	      	if (compareSectionRegions = 0 ) then 
	      		sectionCurs.gotoRange(sectionRange.getStart(), false)
	      		InsertParaBreak(sectionCurs)
	      	End if 
	       	if (compareSectionRegions = 1) then 
	       	   sectionCurs.gotoRange(sectionRange.getEnd(), false)
	       	   InsertParaBreak(sectionCurs)
	       	   rem endCursor.goLeft(1, false)
	       	end if
	        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
		End If
        
        REM create the new section object
        Dim newSect, oCols
        newSect = docComponent.createInstance(&quot;com.sun.star.text.TextSection&quot;)
   		newSect.setName(newSection)
   		REM Now, create the columns...
     	oCols = docComponent.createInstance(&quot;com.sun.star.text.TextColumns&quot;)
    	oCols.setColumnCount(1)
    	newSect.TextColumns = oCols
    	rem XRay endCursor
    	REM Insert the section
    	if (Not IsEmpty(endCursor.TextSection)) then 
    		rem this is a nested section inside the inner section
    		rem add a new paragrph after the inner section
    		if (endCursor.TextSection.Name &lt;&gt; innerSection) then 
	    		Dim innerSect, oParNew
	    		innerSect = docComponent.getTextSections().getByName(endCursor.TextSection.Name)
	    		Dim prevSection 
	    		
	    		Do while (1=1)
	    			if (innerSect.Name = innerSection) then 
	    				exit do
	    			end if
	    			prevSection = innerSect
	    			innerSect = innerSect.ParentSection
	    		Loop
	    		
	    		oParNew = docComponent.createInstance(&quot;com.sun.star.text.Paragraph&quot;)
	    		docComponent.getText().insertTextContentAfter(oParNew, prevSection)
	    		rem docComponent.getText().insertTextContentAfter(newSect, innerSect)
	    		endCursor.goRight(1, false)
	    		endCursor.getText().insertTextContent(endCursor, newSect, false)
    		
    		else
    			endCursor.getText().insertTextContent( endCursor, newSect, false)
    		end if
    	
    	else
    		rem there is no nested section
    	
        	endCursor.getText().insertTextContent( endCursor, newSect, false)
		end if
		
  End If

End Sub


Sub AddSectionInsideSectionWithStyle ( docComponent, innerSection as String,  newSection as String, backgroundColor as Long, sectionLeftIndentInches as Single )
   		AddSectionInsideSection docComponent, innerSection, newSection
   		Dim newSect 
   		newSect = docComponent.getTextSections().getByName(newSection)
    	newSect.BackColor = backgroundColor
    	newSect.SectionLeftMargin = sectionLeftIndentInches * 10 * 254
 
End Sub



Sub InsertHTMLDocumentIntoSection(docComponent, sName$, sFileUrl$ , sStyleApply$)
 sFileUrl = ConvertToURL(sFileUrl)
   rem now iterate through the section 
  Dim oSect
  Dim viewCur 
  
  viewCur = docComponent.currentcontroller.getviewcursor
  
  If docComponent.getTextSections().hasByName(sName) Then
  	  oSect = docComponent.getTextSections().getByName(sName)
       rem XRay oSect
       
  	    Dim sectionText , sectionCurs
    	sectionCurs = docComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        
        Dim loadingProperty()
        loadingProperty = Array(MakePropertyValue(&quot;FilterName&quot;, &quot;HTML (StarWriter)&quot;))
        endCursor.insertDocumentFromURL(sFileURL, loadingProperty)
        if (Len(sStyleApply) &lt;&gt;  0 ) then 
        	endCursor.ParaStyleName = sStyleApply
        End If
  End If
 

End Sub

Function SetAttributeData (uda as Object, cAttributeName(), cAttributeValue()) 
	Dim oMyAttribute 
    Dim i
    For i=LBound(cAttributeName) to UBound(cAttributeName)
    
 &apos; Is there already an attribute with the desired name? 
 
   If uda.hasByName( cAttributeName(i) ) Then 
      &apos; Get the existing attribute. 
      oMyAttribute = uda.getByName( cAttributeName(i) ) 
      &apos; Update the value. 
      oMyAttribute.Value = cAttributeValue(i)
      uda.replaceByName(cAttributeName(i), oMyAttribute)
   Else 
      &apos; Create a new attribute. 
      oMyAttribute = createUnoStruct( &quot;com.sun.star.xml.AttributeData&quot; ) 
      With oMyAttribute 
         .Type = &quot;CDATA&quot; 
         .Value = cAttributeValue (i)
      End With 
      uda.insertByName( cAttributeName(i), oMyAttribute ) 
   
   EndIf 
   
   Next
   
   SetAttributeData = uda
   
End Function


Sub SetSectionMetadata (docComponent, sectionName as String, attrNames() , attrValues() )
	Dim oDoc
	oDoc = docComponent
	Dim sect
	sect = oDoc.getTextSections().getByName(sectionName)
	Dim uda
	uda = sect.UserDefinedAttributes
	Dim i as integer
	
	uda = SetAttributeData(uda, attrNames(), attrValues() )
		

   &apos; Assign the modified container of attributes back to the shape. 
   sect.UserDefinedAttributes = uda 	


End Sub



Sub RenameSection (docComponent, renameThisSection as String, renameToSection as String)
	Dim oDoc 
	oDoc = docComponent
	
	Dim sectRename
	sectRename = oDoc.getTextSections().getByName(renameThisSection)
	if (sectRename.IsProtected ) then
		sectRename.IsProtected = False
	End if
	sectRename.setName(renameToSection)
	sectRename.IsProtected = True
End Sub

Sub InsertDocumentIntoSection(docComponent, sName$, sFileUrl$)
  
   sFileUrl = ConvertToURL(sFileUrl)
   rem now iterate through the section 
  Dim oSect
  If docComponent.getTextSections().hasByName(sName) Then
  	  oSect = docComponent.getTextSections().getByName(sName)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = docComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        endCursor.insertDocumentFromURL(sFileURL, Array())
      
  End If
 
End Sub



Sub SetInputFieldValue (hintName as String, hintValue as String)
  Dim vEnum
  Dim vVal
  Dim s1$, s2$
  Dim sFieldName$, sFieldValue$, sInstanceName$, sHint$, sContent$
  
  vEnum = thisComponent.getTextFields().createEnumeration()
  If Not IsNull(vEnum) Then
    Do While vEnum.hasMoreElements()
      vVal = vEnum.nextElement()
      If vVal.supportsService(&quot;com.sun.star.text.TextField.Input&quot;) Then
      		if (vVal.Hint = hintName ) then 
      			rem hint name exists 
      			rem set hint name to new value
      			vVal.Content = hintValue
      		end if 
      end If
    Loop
  End if
  ThisComponent.TextFields.refresh()
End Sub

Sub SetReferenceInputFieldValue (docComponent, hintName as String, placeHolder as string, unprotectSection as string)
  Dim vEnum
  Dim vVal
  
  vEnum = docComponent.getTextFields().createEnumeration()
  
  Dim sect 
  if (unprotectSection &lt;&gt; &quot;&quot; ) then 
 	 sect = docComponent.getTextSections().getByName(unprotectSection)
  	 sect.IsProtected = False
  end if 
  
  If Not IsNull(vEnum) Then
    Do While vEnum.hasMoreElements()
      vVal = vEnum.nextElement()
      If vVal.supportsService(&quot;com.sun.star.text.TextField.JumpEdit&quot;) Then
      		if (vVal.Hint = hintName ) then 
      		
      			rem hint name exists 
      			rem set hint name to new value
      			vVal.PlaceHolder = placeHolder
      		    vVal.update
      		end if 
      end If
    Loop
  End if
  
  if (unprotectSection &lt;&gt; &quot;&quot;) then
  	sect.IsProtected = True
  end if
End Sub

Sub EmbedGraphic(oDoc, sURL$)
  REM Author: Stephan Wunderlich
  Dim oShape
  Dim oGraph     &apos;The graphic object is text content.
  Dim oProvider  &apos;GraphicProvider service.
  Dim oText
  Dim s$

  s = &quot;com.sun.star.drawing.GraphicObjectShape&quot;
  oShape = oDoc.createInstance(s)
  oGraph = oDoc.createInstance(&quot;com.sun.star.text.GraphicObject&quot;)

  oDoc.getDrawPage().add(oShape)

  oProvider = createUnoService(&quot;com.sun.star.graphic.GraphicProvider&quot;)

  Dim oProps(0) as new com.sun.star.beans.PropertyValue
  oProps(0).Name  = &quot;URL&quot;
  oProps(0).Value = sURL

  oShape.Graphic = oProvider.queryGraphic(oProps())
  oGraph.graphicurl = oShape.graphicurl
  oGraph.Width = 350 * 15
  oGraph.Height = 71 * 15
  oText= oDoc.getText()

  &apos; Insert at the current cursor location
  Dim oVC : oVC = oDoc.getCurrentController().getViewCursor()
  oText.insertTextContent(oVC, oGraph, false)

  &apos; We no longer require the shape object.
  oDoc.getDrawPage().remove(oShape)
End Sub

Sub SetDocumentProperty (propertyName as string, propertyValue as string)
       XRay thisComponent.DocumentInfo
	if (Not thisComponent.DocumentInfo.getPropertySetInfo().hasPropertyByName(propertyName) ) then
		thisComponent.Documentinfo.AddProperty(propertyName , 0, propertyValue)
	else
		Msgbox thisComponent.DocumentInfo.getPropertyValue(propertyName)
	end if
End Sub

Sub AddImageIntoSection(docComponent, sectionName$, sURL$)
  Dim oShape
  Dim oGraph     &apos;The graphic object is text content.
  Dim oProvider  &apos;GraphicProvider service.
  Dim oText
  Dim s$
  Dim oDoc 
  Dim sName as string
  sName = sectionName 
  oDoc = docComponent

  sURL = ConvertToURL(sURL)
  
  s = &quot;com.sun.star.drawing.GraphicObjectShape&quot;
  oShape = oDoc.createInstance(s)
  oGraph = oDoc.createInstance(&quot;com.sun.star.text.GraphicObject&quot;)

  oDoc.getDrawPage().add(oShape)

  oProvider = createUnoService(&quot;com.sun.star.graphic.GraphicProvider&quot;)

  Dim oProps(0) as new com.sun.star.beans.PropertyValue
  oProps(0).Name  = &quot;URL&quot;
  oProps(0).Value = sURL

  oShape.Graphic = oProvider.queryGraphic(oProps())
  oGraph.graphicurl = oShape.graphicurl
  oGraph.Width = 350 * 15
  oGraph.Height = 71 * 15
  
  rem now iterate through the section 
  Dim oSect
  If docComponent.getTextSections().hasByName(sName) Then
  	  oSect = docComponent.getTextSections().getByName(sName)
       rem XRay oSect
  	    Dim sectionText , sectionCurs
    	sectionCurs = docComponent.getText().createTextCursor()
        sectionCurs.gotoRange(oSect.getAnchor(), false)
        Dim endRange, endCursor
        endRange = sectionCurs.getEnd()
      
        endCursor = endRange.getText().createTextCursorByRange(endRange.getStart())
        endCursor.getText().insertTextContent( endCursor, oGraph, False)
        
  End If
        
        
  rem oText= oDoc.getText()

  &apos; Insert at the current cursor location
  rem Dim oVC : oVC = oDoc.getCurrentController().getViewCursor()
  rem oText.insertTextContent(oVC, oGraph, false)

  &apos; We no longer require the shape object.
  oDoc.getDrawPage().remove(oShape)
End Sub


Sub SearchAndReplace2 (docComponent, searchFor as string, replaceWith as String, bookmarkRange(), URLStr as String , URLName as String)
    
    Dim oBookmarkBegin, oBookmarkEnd
    oBookmarkBegin = docComponent.getBookmarks().getByName(bookmarkRange(LBound(bookmarkRange))
    oBookmarkEnd = docComponent.getBookmarks().getByName(bookmarkRange(UBound(bookmarkRange))
 	
 	Dim beginAnchor, statCurs
    beginAnchor = oBookmarkBegin.getAnchor()
    statCurs = beginAnchor.getText().createTextCursorByRange(beginAnchor.getStart())
    statCurs.gotoRange(oBookmarkEnd.getAnchor().getStart(), true)
    Dim cursorStr as string
    cursorStr =  statCurs.getString()
    Dim newStr as String
    newStr = ReplaceSubstring(cursorStr, searchFor, replaceWith)
    statCurs.setString(newStr)
    statCurs.CharBackColor = RGB (255, 255, 192)
    statCurs.HyperLinkURL = &quot;#&quot;+ URLStr
    statCurs.HyperLinkName = URLName
    rem oBookmarkBegin.dispose()
    oBookmarkEnd.dispose()
    
End Sub



Sub InsertArrayAsBulletListAtCurrentCursor (docComponent, selectItemsArray() , listItemURIs()  )

	Dim oDoc,  oText, oCur, oStart
	oDoc = docComponent

	oStart = docComponent.currentcontroller.getViewCursor().getStart()
    oText = docComponent.currentController.getviewcursor().getText()
    oCur=oText.createTextCursorByRange(docComponent.currentcontroller.getViewCursor().getStart())

	Dim i 
	
	For i=LBound(selectItemsArray) to UBound(selectItemsArray)
	  oCur.HyperLinkURL=&quot;http://akomantoso.org/resolver/&quot;+ listItemURIs(i)
	  oText.insertString(oCur,  selectItemsArray(i) , False)
	  &apos;oCur.CharWeight = com.sun.star.awt.FontWeight.BOLD
	  &apos;oCur.gotoEndOfSentence(False)
	  &apos;oCur.CharWeight = com.sun.star.awt.FontWeight.NORMAL 
 	  oText.insertControlCharacter(oCur, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False)
	Next i
	
	Dim oNumRules
	
	oNumRules = ThisComponent.createInstance(&quot;com.sun.star.text.NumberingRules&quot;)

	Dim mLevel, k, vProperty
	
	mLevel = oNumRules.getByIndex(0)
	For k = LBound(mLevel) To UBound(mLevel)
          vProperty = mLevel(k)
          If (vProperty.Name = &quot;NumberingType&quot;) Then
            &apos;and give it the passed Format
            vProperty.Value = com.sun.star.style.NumberingType.CHAR_SPECIAL
            oNumRules.replaceByIndex(0, mLevel)
          End If 
          &apos;mLevel(k) = vProperty
	next

oCur.gotoPreviousParagraph(False)
	
oCur.gotoRange(oStart, true)
rem	Dim l
rem	For l=LBound(selectItemsArray) to UBound(selectItemsArray)
rem		oCur.gotoPreviousParagraph(True)
rem	Next l
oCur.setPropertyValue(&quot;NumberingRules&quot;, oNumRules)	


End Sub



Sub InsertArrayAsBulletList (docComponent, bookmarkAnchor as String, selectItemsArray() , listItemURIs()  )

	Dim oDoc,  oText, oCur
	Dim bookmarkBegin, beginAnchor
	oDoc = docComponent
	bookmarkBegin = oDoc.getBookmarks().getByName(bookmarkAnchor)
	beginAnchor = bookmarkBegin.getAnchor()
	
    oText = beginAnchor.getText()
    oCur=oText.createTextCursorByRange(beginAnchor.getStart())


	
	Dim i 
	
	For i=LBound(selectItemsArray) to UBound(selectItemsArray)
	  oCur.HyperLinkURL=&quot;http://akomantoso.org/resolver/&quot;+ listItemURIs(i)
	  oText.insertString(oCur,  selectItemsArray(i) , False)
	  &apos;oCur.CharWeight = com.sun.star.awt.FontWeight.BOLD
	  &apos;oCur.gotoEndOfSentence(False)
	  &apos;oCur.CharWeight = com.sun.star.awt.FontWeight.NORMAL 
 	  oText.insertControlCharacter(oCur, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False)
	Next i
	
	Dim oNumRules
	
	oNumRules = ThisComponent.createInstance(&quot;com.sun.star.text.NumberingRules&quot;)

	Dim mLevel, k, vProperty
	
	mLevel = oNumRules.getByIndex(0)
	For k = LBound(mLevel) To UBound(mLevel)
          vProperty = mLevel(k)
          If (vProperty.Name = &quot;NumberingType&quot;) Then
            &apos;and give it the passed Format
            vProperty.Value = com.sun.star.style.NumberingType.CHAR_SPECIAL
            oNumRules.replaceByIndex(0, mLevel)
          End If 
          &apos;mLevel(k) = vProperty
	next

oCur.gotoPreviousParagraph(False)
	
oCur.gotoRange(beginAnchor.getStart(), true)
rem	Dim l
rem	For l=LBound(selectItemsArray) to UBound(selectItemsArray)
rem		oCur.gotoPreviousParagraph(True)
rem	Next l
oCur.setPropertyValue(&quot;NumberingRules&quot;, oNumRules)	


End Sub

Sub SearchAndReplace (docComponent, searchFor as string, replaceWith as string)
	Dim oReplace
  	oReplace = docComponent.createReplaceDescriptor() 
  	oReplace.SearchCaseSensitive = True 
  	oReplace.SearchString = searchFor
    oReplace.ReplaceString = replaceWith 
    docComponent.ReplaceAll(oReplace)
    
End Sub


Sub SearchAndReplaceWithAttributes (searchFor as string, replaceWith as string, attrNames() as String, attrValues() as com.sun.star.xml.AttributeData)
	Dim oReplace
  	oReplace = ThisComponent.createReplaceDescriptor() 
  	oReplace.SearchCaseSensitive = True 
  	oReplace.SearchString = searchFor
    oReplace.ReplaceString = replaceWith 
    ThisComponent.ReplaceAll(oReplace)
    Dim viewCursor 
    viewCursor = ThisComponent.getCurrentController().getViewCursor()
    viewCursor.gotoStartofLine(true)
    viewCursor.TextUserDefinedAttributes = AddAttributesToContainer (viewCursor.TextUserDefinedAttributes, attrNames, attrValues)
    viewCursor.HyperLinkURL = &quot;URL: &quot;+ attrValues(0).Value + &quot; ; &quot; + attrValues(1).Value
    viewCursor.HyperLinkTarget =  &quot;URL: &quot;+ attrValues(0).Value + &quot; ; &quot; + attrValues(1).Value
    viewCursor.gotoEndofLine(false)
End Sub


Function ReplaceLinkInSectionByName(docComponent, sectionName as String, hyperLinkName as String, hyperLinkText as String, hyperLinkURL as String, isProtected as boolean) 
Dim oSearchDesc ,oAllHyperLinks ,i,oFound,oCrsr, oNewDoc
   oNewDoc = docComponent
   oSearchDesc = oNewDoc.CreateSearchDescriptor 

Dim sectionHandle
Dim sectRange
Dim sectCursBegin, sectCursEnd
	sectionHandle = oNewDoc.getTextSections().getByName(sectionName)
	if (isProtected) then 
		sectionHandle.isProtected = False
	End if
   
   oSearchDesc.valuesearch  = False
   
   Dim SrchAttributes(0) as new com.sun.star.beans.PropertyValue
   SrchAttributes(0).Name = &quot;HyperLinkName&quot; 
   SrchAttributes(0).Value = &quot;&quot;
  	
	sectRange = sectionHandle.getAnchor()
	sectCursBegin = sectRange.getText().createTextCursorByRange(sectRange.getStart())
	sectCursEnd = sectRange.getText().createTextCursorByRange(sectRange.getEnd())
	
	
   oSearchDesc.SetSearchAttributes(SrchAttributes()) 
   Dim oFoundPrevious
   oFound = oNewDoc.findNext(sectRange.getStart(), oSearchDesc) 
   oFoundPrevious = oFound
   Do while not isnull(oFound)
	Dim var  
    var = oNewDoc.Text.compareRegionEnds(oFound, sectRange.getEnd()) 
   	if ( -1 =  var) then 
   		Exit do
   	End if
   	oFoundPrevious = oFound
   	oFound = oNewDoc.findNext(oFound.End, oSearchDesc )

   Loop
   
   if (IsNull (oFoundPrevious) ) then 
     	ReplaceLinkInSectionByName = Array (-1, &quot;No link was found&quot;)
   		if (isProtected) then
   			sectionHandle.isProtected = true
   		end if
   		Exit Function
   End if 
   
   if (oNewDoc.Text.compareRegionEnds (oFoundPrevious, sectRange.getEnd()) = -1 ) then 
   		ReplaceLinkInSectionByName = Array (-1, &quot;Link was found in a different section&quot;)
   		if (isProtected) then
   			sectionHandle.isProtected = true
   		end if
   		Exit Function
   End if
   
   rem this is a valid match
   if (oFoundPrevious.HyperLinkName = hyperLinkName) then 
   		oFoundPrevious.setString(hyperLinkText)
   		oFoundPrevious.HyperLinkURL = hyperLinkURL
   		ReplaceLinkInSectionByName = Array (1, &quot;Link successfully changed&quot;)
   		if (isProtected) then
   			sectionHandle.isProtected = true
   		end if
   		Exit Function
   End if
   if (isProtected) then
   		sectionHandle.isProtected = true
   end if
   ReplaceLinkInSectionByName = Array (-1, &quot;No link was found&quot;)
   
End Function


Const MOVESECTION_BEFORE = 0
Const MOVESECTION_AFTER = 1

Sub MoveSection (docComponent, moveThisSection as string, fixedSection as string, beforeOrAfter as Integer)
   rem get handles
   Dim oDoc, oViewCurs, NoArg(), oText, sections
   oDoc = docComponent
   oViewCurs = oDoc.CurrentController.getViewCursor
   oText = oDoc.getText()
   
   rem Get all sections
   sections=oDoc.getTextSections()
   
   rem get handle to section that is to be moved
   Dim sectMoveThis, sectMoveThisRange
   Dim sectMoveThisBeginCurs, sectMoveThisEndCurs
   
   rem this is the Source section.  the move section happens in the following manner
   rem 1 - the source section range is copied (copying the entire contents of the section
   rem 2 - the contents of the section, and the section itself are deleted.
   rem 3 - the section is recreated with the same name in the new position 
   rem 4 - the contents are &quot;pasted&quot; from memorey into the new location
   rem 5 - contents of the Source section are &quot;copied&quot;, and then 
   rem because source section is deleted and recreated, any userdefinedattributes defined on it are lot
   rem this means they need to be captured before deletion and restored into the new section.
   
   Dim sectMoveThisAttribs
   
   sectMoveThis = sections.getByName(moveThisSection)
   sectMoveThisAttribs = sectMoveThis.UserDefinedAttributes
   sectMoveThisRange = sectMoveThis.getAnchor()
   sectMoveThisBeginCurs = sectMoveThisRange.getText().createTextCursorByRange(sectMoveThisRange.getStart())
   
   rem sectMoveThisEndCurs = sectMoveThisRange.getText().createTextCursorByRange(sectMoveThisRange.getEnd())
   rem oViewCurs.gotoRange(sectMoveThisRange.getStart(), false)
   rem oViewCurs.gotoRange(sectMoveThisRange.getEnd(), true)
   
   rem select section to be moved
   oDoc.CurrentController.Select(sectMoveThisRange)
   
   Dim oDisp
   rem create the DispatcherService 
   oDisp = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;) 
   rem copy the current selection to the clipboard. 
   oDisp.executeDispatch(oDoc.CurrentController, &quot;.uno:Copy&quot;, &quot;&quot;, 0, NoArg()) 
   &apos; section content in clipboard now....
   &apos; now remove the section and its contents
   &apos; and recreate it in another place
   rem save section backcolor, leftmargin and rightmargin
   rem we will set these back to the recreated section boilerplate
   Dim backColor, sectionLeft, sectionRight
   backColor = sectMoveThis.BackColor
   sectionLeft = sectMoveThis.SectionLeftMargin
   sectionRight = sectMoveThis.SectionRightMargin
   
   rem remove the section to be moved
   RemoveSectionAndContents oDoc, moveThisSection
   
   rem get handle to section before which we are moving the first section 
   Dim sectFixed, sectFixedRange
   Dim sectFixedCurs 
   sectFixed = sections.getByName(fixedSection)
   sectFixedRange = sectFixed.getAnchor()
   sectFixedCurs = sectFixedRange.getText().createTextCursorByRange(sectFixedRange.getEnd())
   
   
   rem create new sectio with the same name, and identical properites
   dim newSect, newSectColumns, newPara
   newSect = oDoc.createInstance(&quot;com.sun.star.text.TextSection&quot;)
   newSect.setName (moveThisSection)
   newSectColumns = oDoc.createInstance(&quot;com.sun.star.text.TextColumns&quot;)
   newSectColumns.setColumnCount(1)
   newSect.TextColumns = newSectColumns
   newSect.BackColor=backColor
   newSect.SectionLeftMargin = sectionLeft
   newSect.SectionRightMargin = sectionRight
   if (Not IsNull(sectMoveThisAttribs)) then 
   	newSect.UserDefinedAttributes = sectMoveThisAttribs
   end if 
   rem we have to create a new paragraph first at the point where we want to insert the section
   rem this is to create a place where the cursor can go and paste the contents of the copied section
   newPara = oDoc.createInstance(&quot;com.sun.star.text.Paragraph&quot;)
   rem create paragraph
   if (beforeOrAfter = MOVESECTION_BEFORE ) Then
 	  oText.insertTextContentBefore ( newPara, sectFixed)
   Elseif (beforeOrAfter = MOVESECTION_AFTER ) Then 
   	  oText.InsertTextContentAfter (newPara, sectFixed)	
   End if
   
   rem select the section before which we want to move our section
   rem and goleft for  1 character, this will move the cursor to the point
   rem just before the section
  
   If (beforeOrAfter = MOVESECTION_BEFORE) Then
   
    oViewCurs.gotoRange(sectFixedRange.getStart(), false)
   	oViewCurs.goleft(1, false)
   
   ElseIf (beforeOrAfter = MOVESECTION_AFTER) Then
   
    oViewCurs.gotoRange(sectFixedRange.getEnd(), false)
    oViewCurs.goRight(1, false)
   
   End If
   
   rem insert the section at the currently moved cursor position
   oText.insertTextContent(oViewCurs, newSect, true)
   rem after creating the section, the cursor moves 1 character after
   rem the section, so we move one character to the left to move inside
   rem the newly created section
   oViewCurs.goLeft(1, false)
   rem now paste the previously copied section contents into the newly created section
   oDisp.executeDispatch(oDoc.CurrentController, &quot;.uno:Paste&quot;, &quot;&quot;, 0, NoArg()) 
 
   rem docText.insertTextContentBefore (newSect, sectFixed)
   rem oViewCurs.gotoRange(sectFixed.getStart() , false)
  rem sectFixedCurs =  sectFixedRange.getText().createTextCursorByRange(sectFixedRange.getStart())
  rem sectFixedCurs.goLeft(1, false)
  rem sectFixedCurs.getText().insertTextContent(sectFixedCurs, newSect, False)
  oDoc.refresh()
   
End Sub 


Sub RemoveSectionAndContents (docComponent, sectionName as string )

  Dim section as Object, aTextRange, xEnum, oText
  oText = docComponent.getText()
  section = docComponent.getTextSections().getByName(sectionName)
  &apos; make section visible to be able to remove its TextContents
  aTextRange=section.getAnchor()
  &apos; Remove all TextContent of the section
  xEnum = aTextRange.createContentEnumeration( &quot;com.sun.star.text.TextContent&quot; )
  While xEnum.hasMoreElements()
            &apos;print xEnum.nextElement().Name
            oText.removeTextContent(xEnum.nextElement())
  Wend
  &apos; remove text of section
 
  aTextRange.setString(&quot;&quot;)
   
  Dim rangeCurs
  rangeCurs = aTextRange.getText().createTextCursorByRange(aTextRange.getStart())
  rangeCurs.gotoRange(aTextRange.getEnd(), true)
  rangeCurs.setPropertyValue(&quot;ParaStyleName&quot;, &quot;Default&quot;)
  
  &apos; Remove the section
  docComponent.getText().removeTextContent(section)
  
End Sub




Sub InsertSectionAfterSection (docComponent, newSectionName as String, relativeToSection as String)
	Dim oNewSection, oRelativeSection, oText, oPar
	
	If (docComponent.getTextSections().hasByName(relativeToSection) ) then
				
		oRelativeSection = docComponent.getTextSections().getByName(relativeToSection)
		AddParaBreakAfterSection (docComponent, relativeToSection)
		
		Dim relativeSectRange, insertCursor
		
		relativeSectRange = oRelativeSection.getAnchor()
		insertCursor = docComponent.getText().createTextCursor()
		REM go to the end of the section
		insertCursor.gotoRange(relativeSectRange.getEnd(), false)
		REM go the paragraph just after the seciotn end boundary
		insertCursor.gotoNextParagraph(false)
		REM select the paragraph just after the end boundary
		insertCursor.gotoEndOfParagraph(true)
		REM conver the paragraph to a section
		oNewSection = createSection(docComponent, newSectionName, 1, 0)
		
		insertCursor.getText().insertTextContent(insertCursor, oNewSection, false)
		
	End If
End Sub


Sub InsertSectionAfterSectionWithStyle (docComponent, newSectionName as String, relativeToSection as String, backgroundColor as Long, sectionLeftIndentInches as Single )
   		InsertSectionAfterSection docComponent, newSectionName, relativeToSection
   		Dim newSect 
   		newSect = docComponent.getTextSections().getByName(newSectionName)
    	newSect.BackColor = backgroundColor
    	newSect.SectionLeftMargin = sectionLeftIndentInches * 10 * 254
 
End Sub



</script:module>